<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="12359"><g><title>dyld`start (2 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0162%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>rust-nexmark`main (2 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0162%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="463.50"></text></g><g><title>rust-nexmark`std::rt::lang_start_internal (2 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0162%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="447.50"></text></g><g><title>rust-nexmark`std::rt::lang_start::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0162%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="431.50"></text></g><g><title>rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0162%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>rust-nexmark`rust_nexmark::main (2 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0162%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>rust-nexmark`logging::Logger::file (2 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0162%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="383.50"></text></g><g><title>rust-nexmark`&lt;tracing_subscriber::filter::env::EnvFilter as core::str::traits::FromStr&gt;::from_str (2 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0162%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>rust-nexmark`core::iter::adapters::try_process (2 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0162%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="351.50"></text></g><g><title>rust-nexmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0162%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>rust-nexmark`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0162%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="319.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.02%)</title><rect x="0.0324%" y="389" width="0.0162%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="0.2824%" y="399.50"></text></g><g><title>rust-nexmark`std::time::Instant::now (6 samples, 0.05%)</title><rect x="0.0485%" y="389" width="0.0485%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="6"/><text x="0.2985%" y="399.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.03%)</title><rect x="0.1780%" y="373" width="0.0324%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="4"/><text x="0.4280%" y="383.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$pthread_mutex_unlock (6 samples, 0.05%)</title><rect x="0.2104%" y="373" width="0.0485%" height="15" fill="rgb(217,207,13)" fg:x="26" fg:w="6"/><text x="0.4604%" y="383.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (7 samples, 0.06%)</title><rect x="0.3398%" y="357" width="0.0566%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="7"/><text x="0.5898%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.06%)</title><rect x="0.3398%" y="341" width="0.0566%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="7"/><text x="0.5898%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__gettimeofday (120 samples, 0.97%)</title><rect x="0.3965%" y="357" width="0.9710%" height="15" fill="rgb(210,31,41)" fg:x="49" fg:w="120"/><text x="0.6465%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (542 samples, 4.39%)</title><rect x="1.3674%" y="357" width="4.3855%" height="15" fill="rgb(221,200,47)" fg:x="169" fg:w="542"/><text x="1.6174%" y="367.50">libsy..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (7 samples, 0.06%)</title><rect x="5.7529%" y="357" width="0.0566%" height="15" fill="rgb(226,26,5)" fg:x="711" fg:w="7"/><text x="6.0029%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (2 samples, 0.02%)</title><rect x="5.7933%" y="341" width="0.0162%" height="15" fill="rgb(249,33,26)" fg:x="716" fg:w="2"/><text x="6.0433%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="5.8095%" y="357" width="0.0243%" height="15" fill="rgb(235,183,28)" fg:x="718" fg:w="3"/><text x="6.0595%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="5.8338%" y="357" width="0.0162%" height="15" fill="rgb(221,5,38)" fg:x="721" fg:w="2"/><text x="6.0838%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (2 samples, 0.02%)</title><rect x="5.8500%" y="357" width="0.0162%" height="15" fill="rgb(247,18,42)" fg:x="723" fg:w="2"/><text x="6.1000%" y="367.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (14 samples, 0.11%)</title><rect x="5.8743%" y="341" width="0.1133%" height="15" fill="rgb(241,131,45)" fg:x="726" fg:w="14"/><text x="6.1243%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (14 samples, 0.11%)</title><rect x="5.8743%" y="325" width="0.1133%" height="15" fill="rgb(249,31,29)" fg:x="726" fg:w="14"/><text x="6.1243%" y="335.50"></text></g><g><title>rust-nexmark`parking_lot::condvar::Condvar::wait_until_internal (709 samples, 5.74%)</title><rect x="0.2589%" y="373" width="5.7367%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="709"/><text x="0.5089%" y="383.50">rust-ne..</text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (15 samples, 0.12%)</title><rect x="5.8743%" y="357" width="0.1214%" height="15" fill="rgb(238,160,17)" fg:x="726" fg:w="15"/><text x="6.1243%" y="367.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (2 samples, 0.02%)</title><rect x="6.0037%" y="341" width="0.0162%" height="15" fill="rgb(214,148,48)" fg:x="742" fg:w="2"/><text x="6.2537%" y="351.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (3 samples, 0.02%)</title><rect x="6.0199%" y="341" width="0.0243%" height="15" fill="rgb(232,36,49)" fg:x="744" fg:w="3"/><text x="6.2699%" y="351.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.02%)</title><rect x="6.0442%" y="341" width="0.0162%" height="15" fill="rgb(209,103,24)" fg:x="747" fg:w="2"/><text x="6.2942%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (13 samples, 0.11%)</title><rect x="6.0604%" y="341" width="0.1052%" height="15" fill="rgb(229,88,8)" fg:x="749" fg:w="13"/><text x="6.3104%" y="351.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (22 samples, 0.18%)</title><rect x="6.0037%" y="357" width="0.1780%" height="15" fill="rgb(213,181,19)" fg:x="742" fg:w="22"/><text x="6.2537%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (2 samples, 0.02%)</title><rect x="6.1655%" y="341" width="0.0162%" height="15" fill="rgb(254,191,54)" fg:x="762" fg:w="2"/><text x="6.4155%" y="351.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (27 samples, 0.22%)</title><rect x="5.9956%" y="373" width="0.2185%" height="15" fill="rgb(241,83,37)" fg:x="741" fg:w="27"/><text x="6.2456%" y="383.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (4 samples, 0.03%)</title><rect x="6.1817%" y="357" width="0.0324%" height="15" fill="rgb(233,36,39)" fg:x="764" fg:w="4"/><text x="6.4317%" y="367.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.02%)</title><rect x="6.2141%" y="373" width="0.0243%" height="15" fill="rgb(226,3,54)" fg:x="768" fg:w="3"/><text x="6.4641%" y="383.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 0.03%)</title><rect x="6.2384%" y="373" width="0.0324%" height="15" fill="rgb(245,192,40)" fg:x="771" fg:w="4"/><text x="6.4884%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.06%)</title><rect x="6.2788%" y="357" width="0.0647%" height="15" fill="rgb(238,167,29)" fg:x="776" fg:w="8"/><text x="6.5288%" y="367.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="6.3436%" y="357" width="0.0324%" height="15" fill="rgb(232,182,51)" fg:x="784" fg:w="4"/><text x="6.5936%" y="367.50"></text></g><g><title>rust-nexmark`&lt;&amp;std::fs::File as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="6.4245%" y="325" width="0.0162%" height="15" fill="rgb(231,60,39)" fg:x="794" fg:w="2"/><text x="6.6745%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (540 samples, 4.37%)</title><rect x="6.4487%" y="309" width="4.3693%" height="15" fill="rgb(208,69,12)" fg:x="797" fg:w="540"/><text x="6.6987%" y="319.50">libsy..</text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (550 samples, 4.45%)</title><rect x="6.3840%" y="357" width="4.4502%" height="15" fill="rgb(235,93,37)" fg:x="789" fg:w="550"/><text x="6.6340%" y="367.50">rust-..</text></g><g><title>rust-nexmark`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (546 samples, 4.42%)</title><rect x="6.4164%" y="341" width="4.4178%" height="15" fill="rgb(213,116,39)" fg:x="793" fg:w="546"/><text x="6.6664%" y="351.50">rust-..</text></g><g><title>rust-nexmark`tokio::io::blocking::Buf::read_from (543 samples, 4.39%)</title><rect x="6.4407%" y="325" width="4.3936%" height="15" fill="rgb(222,207,29)" fg:x="796" fg:w="543"/><text x="6.6907%" y="335.50">rust-..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="10.8504%" y="341" width="0.0243%" height="15" fill="rgb(206,96,30)" fg:x="1341" fg:w="3"/><text x="11.1004%" y="351.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::raw::RawTask::from_raw (2 samples, 0.02%)</title><rect x="10.8747%" y="341" width="0.0162%" height="15" fill="rgb(218,138,4)" fg:x="1344" fg:w="2"/><text x="11.1247%" y="351.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::scheduler::current_thread::Handle as tokio::util::wake::Wake&gt;::wake (35 samples, 0.28%)</title><rect x="10.9313%" y="325" width="0.2832%" height="15" fill="rgb(250,191,14)" fg:x="1351" fg:w="35"/><text x="11.1813%" y="335.50"></text></g><g><title>rust-nexmark`tokio::runtime::driver::Handle::unpark (34 samples, 0.28%)</title><rect x="10.9394%" y="309" width="0.2751%" height="15" fill="rgb(239,60,40)" fg:x="1352" fg:w="34"/><text x="11.1894%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`kevent (34 samples, 0.28%)</title><rect x="10.9394%" y="293" width="0.2751%" height="15" fill="rgb(206,27,48)" fg:x="1352" fg:w="34"/><text x="11.1894%" y="303.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (48 samples, 0.39%)</title><rect x="10.8342%" y="357" width="0.3884%" height="15" fill="rgb(225,35,8)" fg:x="1339" fg:w="48"/><text x="11.0842%" y="367.50"></text></g><g><title>rust-nexmark`tokio::task::local::Shared::schedule (41 samples, 0.33%)</title><rect x="10.8908%" y="341" width="0.3317%" height="15" fill="rgb(250,213,24)" fg:x="1346" fg:w="41"/><text x="11.1408%" y="351.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::raw::schedule (4 samples, 0.03%)</title><rect x="11.2226%" y="357" width="0.0324%" height="15" fill="rgb(247,123,22)" fg:x="1387" fg:w="4"/><text x="11.4726%" y="367.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Inner::run (1,386 samples, 11.21%)</title><rect x="0.0971%" y="389" width="11.2145%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1386"/><text x="0.3471%" y="399.50">rust-nexmark`toki..</text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (623 samples, 5.04%)</title><rect x="6.2707%" y="373" width="5.0409%" height="15" fill="rgb(231,145,46)" fg:x="775" fg:w="623"/><text x="6.5207%" y="383.50">rust-n..</text></g><g><title>rust-nexmark`tokio::task::local::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::task::local::Shared&gt;&gt;::schedule (6 samples, 0.05%)</title><rect x="11.2630%" y="357" width="0.0485%" height="15" fill="rgb(251,118,11)" fg:x="1392" fg:w="6"/><text x="11.5130%" y="367.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.04%)</title><rect x="11.3197%" y="293" width="0.0405%" height="15" fill="rgb(217,147,25)" fg:x="1399" fg:w="5"/><text x="11.5697%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="11.4249%" y="245" width="0.0243%" height="15" fill="rgb(247,81,37)" fg:x="1412" fg:w="3"/><text x="11.6749%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="11.5058%" y="213" width="0.0647%" height="15" fill="rgb(209,12,38)" fg:x="1422" fg:w="8"/><text x="11.7558%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.19%)</title><rect x="11.5705%" y="213" width="0.1942%" height="15" fill="rgb(227,1,9)" fg:x="1430" fg:w="24"/><text x="11.8205%" y="223.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 0.12%)</title><rect x="11.7647%" y="213" width="0.1214%" height="15" fill="rgb(248,47,43)" fg:x="1454" fg:w="15"/><text x="12.0147%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="11.8861%" y="213" width="0.0566%" height="15" fill="rgb(221,10,30)" fg:x="1469" fg:w="7"/><text x="12.1361%" y="223.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$free (15 samples, 0.12%)</title><rect x="11.9427%" y="213" width="0.1214%" height="15" fill="rgb(210,229,1)" fg:x="1476" fg:w="15"/><text x="12.1927%" y="223.50"></text></g><g><title>rust-nexmark`builtins::stream::Stream&lt;T&gt;::recv::_{{closure}} (17 samples, 0.14%)</title><rect x="12.0641%" y="213" width="0.1376%" height="15" fill="rgb(222,148,37)" fg:x="1491" fg:w="17"/><text x="12.3141%" y="223.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (6 samples, 0.05%)</title><rect x="12.2016%" y="213" width="0.0485%" height="15" fill="rgb(234,67,33)" fg:x="1508" fg:w="6"/><text x="12.4516%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.05%)</title><rect x="13.6742%" y="197" width="0.0485%" height="15" fill="rgb(247,98,35)" fg:x="1690" fg:w="6"/><text x="13.9242%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="13.7228%" y="197" width="0.0243%" height="15" fill="rgb(247,138,52)" fg:x="1696" fg:w="3"/><text x="13.9728%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (70 samples, 0.57%)</title><rect x="13.7471%" y="197" width="0.5664%" height="15" fill="rgb(213,79,30)" fg:x="1699" fg:w="70"/><text x="13.9971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (139 samples, 1.12%)</title><rect x="14.3135%" y="197" width="1.1247%" height="15" fill="rgb(246,177,23)" fg:x="1769" fg:w="139"/><text x="14.5635%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.05%)</title><rect x="15.4381%" y="197" width="0.0485%" height="15" fill="rgb(230,62,27)" fg:x="1908" fg:w="6"/><text x="15.6881%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (58 samples, 0.47%)</title><rect x="15.4867%" y="197" width="0.4693%" height="15" fill="rgb(216,154,8)" fg:x="1914" fg:w="58"/><text x="15.7367%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.06%)</title><rect x="15.9560%" y="197" width="0.0566%" height="15" fill="rgb(244,35,45)" fg:x="1972" fg:w="7"/><text x="16.2060%" y="207.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_string (11 samples, 0.09%)</title><rect x="16.0126%" y="197" width="0.0890%" height="15" fill="rgb(251,115,12)" fg:x="1979" fg:w="11"/><text x="16.2626%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.48%)</title><rect x="17.0483%" y="181" width="0.4774%" height="15" fill="rgb(240,54,50)" fg:x="2107" fg:w="59"/><text x="17.2983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.02%)</title><rect x="17.5257%" y="181" width="0.0243%" height="15" fill="rgb(233,84,52)" fg:x="2166" fg:w="3"/><text x="17.7757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (74 samples, 0.60%)</title><rect x="17.5500%" y="181" width="0.5988%" height="15" fill="rgb(207,117,47)" fg:x="2169" fg:w="74"/><text x="17.8000%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.14%)</title><rect x="18.1487%" y="181" width="0.1376%" height="15" fill="rgb(249,43,39)" fg:x="2243" fg:w="17"/><text x="18.3987%" y="191.50"></text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (35 samples, 0.28%)</title><rect x="18.5128%" y="165" width="0.2832%" height="15" fill="rgb(209,38,44)" fg:x="2288" fg:w="35"/><text x="18.7628%" y="175.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_string (307 samples, 2.48%)</title><rect x="18.2863%" y="181" width="2.4840%" height="15" fill="rgb(236,212,23)" fg:x="2260" fg:w="307"/><text x="18.5363%" y="191.50">ru..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (244 samples, 1.97%)</title><rect x="18.7960%" y="165" width="1.9743%" height="15" fill="rgb(242,79,21)" fg:x="2323" fg:w="244"/><text x="19.0460%" y="175.50">r..</text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (233 samples, 1.89%)</title><rect x="18.8850%" y="149" width="1.8853%" height="15" fill="rgb(211,96,35)" fg:x="2334" fg:w="233"/><text x="19.1350%" y="159.50">r..</text></g><g><title>rust-nexmark`&lt;builtins::string::String as core::convert::From&lt;alloc::string::String&gt;&gt;::from (15 samples, 0.12%)</title><rect x="20.7703%" y="181" width="0.1214%" height="15" fill="rgb(253,215,40)" fg:x="2567" fg:w="15"/><text x="21.0203%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (110 samples, 0.89%)</title><rect x="21.0778%" y="165" width="0.8900%" height="15" fill="rgb(211,81,21)" fg:x="2605" fg:w="110"/><text x="21.3278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (133 samples, 1.08%)</title><rect x="21.9678%" y="165" width="1.0761%" height="15" fill="rgb(208,190,38)" fg:x="2715" fg:w="133"/><text x="22.2178%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (64 samples, 0.52%)</title><rect x="23.0439%" y="165" width="0.5178%" height="15" fill="rgb(235,213,38)" fg:x="2848" fg:w="64"/><text x="23.2939%" y="175.50"></text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (31 samples, 0.25%)</title><rect x="23.9259%" y="149" width="0.2508%" height="15" fill="rgb(237,122,38)" fg:x="2957" fg:w="31"/><text x="24.1759%" y="159.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_string (3,579 samples, 28.96%)</title><rect x="23.5618%" y="165" width="28.9587%" height="15" fill="rgb(244,218,35)" fg:x="2912" fg:w="3579"/><text x="23.8118%" y="175.50">rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializ..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (3,503 samples, 28.34%)</title><rect x="24.1767%" y="149" width="28.3437%" height="15" fill="rgb(240,68,47)" fg:x="2988" fg:w="3503"/><text x="24.4267%" y="159.50">rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;..</text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (3,454 samples, 27.95%)</title><rect x="24.5732%" y="133" width="27.9472%" height="15" fill="rgb(210,16,53)" fg:x="3037" fg:w="3454"/><text x="24.8232%" y="143.50">rust-nexmark`csv_core::reader::Reader::read_f..</text></g><g><title>rust-nexmark`&lt;builtins::string::String as core::convert::From&lt;alloc::string::String&gt;&gt;::from (20 samples, 0.16%)</title><rect x="52.5204%" y="165" width="0.1618%" height="15" fill="rgb(235,124,12)" fg:x="6491" fg:w="20"/><text x="52.7704%" y="175.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$malloc (10 samples, 0.08%)</title><rect x="52.6823%" y="165" width="0.0809%" height="15" fill="rgb(224,169,11)" fg:x="6511" fg:w="10"/><text x="52.9323%" y="175.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memcpy (13 samples, 0.11%)</title><rect x="52.7632%" y="165" width="0.1052%" height="15" fill="rgb(250,166,2)" fg:x="6521" fg:w="13"/><text x="53.0132%" y="175.50"></text></g><g><title>rust-nexmark`__rdl_alloc (20 samples, 0.16%)</title><rect x="52.8684%" y="165" width="0.1618%" height="15" fill="rgb(242,216,29)" fg:x="6534" fg:w="20"/><text x="53.1184%" y="175.50"></text></g><g><title>rust-nexmark`core::str::converts::from_utf8 (367 samples, 2.97%)</title><rect x="53.0302%" y="165" width="2.9695%" height="15" fill="rgb(230,116,27)" fg:x="6554" fg:w="367"/><text x="53.2802%" y="175.50">rus..</text></g><g><title>rust-nexmark`&lt;builtins::string::String as serde::de::Deserialize&gt;::deserialize (4,347 samples, 35.17%)</title><rect x="20.8917%" y="181" width="35.1727%" height="15" fill="rgb(228,99,48)" fg:x="2582" fg:w="4347"/><text x="21.1417%" y="191.50">rust-nexmark`&lt;builtins::string::String as serde::de::Dese..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (8 samples, 0.06%)</title><rect x="55.9997%" y="165" width="0.0647%" height="15" fill="rgb(253,11,6)" fg:x="6921" fg:w="8"/><text x="56.2497%" y="175.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$malloc (11 samples, 0.09%)</title><rect x="56.0644%" y="181" width="0.0890%" height="15" fill="rgb(247,143,39)" fg:x="6929" fg:w="11"/><text x="56.3144%" y="191.50"></text></g><g><title>rust-nexmark`__rdl_alloc (14 samples, 0.11%)</title><rect x="56.1615%" y="181" width="0.1133%" height="15" fill="rgb(236,97,10)" fg:x="6941" fg:w="14"/><text x="56.4115%" y="191.50"></text></g><g><title>rust-nexmark`atoi::Sign::try_from (23 samples, 0.19%)</title><rect x="56.2748%" y="181" width="0.1861%" height="15" fill="rgb(233,208,19)" fg:x="6955" fg:w="23"/><text x="56.5248%" y="191.50"></text></g><g><title>rust-nexmark`atoi::atoi (312 samples, 2.52%)</title><rect x="56.4609%" y="181" width="2.5245%" height="15" fill="rgb(216,164,2)" fg:x="6978" fg:w="312"/><text x="56.7109%" y="191.50">ru..</text></g><g><title>rust-nexmark`core::str::converts::from_utf8 (88 samples, 0.71%)</title><rect x="58.9854%" y="181" width="0.7120%" height="15" fill="rgb(220,129,5)" fg:x="7290" fg:w="88"/><text x="59.2354%" y="191.50"></text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (88 samples, 0.71%)</title><rect x="59.6974%" y="181" width="0.7120%" height="15" fill="rgb(242,17,10)" fg:x="7378" fg:w="88"/><text x="59.9474%" y="191.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_struct (6,239 samples, 50.48%)</title><rect x="16.1016%" y="197" width="50.4814%" height="15" fill="rgb(242,107,0)" fg:x="1990" fg:w="6239"/><text x="16.3516%" y="207.50">rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::d..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (763 samples, 6.17%)</title><rect x="60.4094%" y="181" width="6.1736%" height="15" fill="rgb(251,28,31)" fg:x="7466" fg:w="763"/><text x="60.6594%" y="191.50">rust-nex..</text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_field (673 samples, 5.45%)</title><rect x="61.1376%" y="165" width="5.4454%" height="15" fill="rgb(233,223,10)" fg:x="7556" fg:w="673"/><text x="61.3876%" y="175.50">rust-ne..</text></g><g><title>rust-nexmark`&lt;builtins::string::String as serde::de::Deserialize&gt;::deserialize (4 samples, 0.03%)</title><rect x="66.5831%" y="197" width="0.0324%" height="15" fill="rgb(215,21,27)" fg:x="8229" fg:w="4"/><text x="66.8331%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (13 samples, 0.11%)</title><rect x="66.6154%" y="197" width="0.1052%" height="15" fill="rgb(232,23,21)" fg:x="8233" fg:w="13"/><text x="66.8654%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (188 samples, 1.52%)</title><rect x="67.2304%" y="181" width="1.5212%" height="15" fill="rgb(244,5,23)" fg:x="8309" fg:w="188"/><text x="67.4804%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.29%)</title><rect x="68.8486%" y="165" width="0.2913%" height="15" fill="rgb(226,81,46)" fg:x="8509" fg:w="36"/><text x="69.0986%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.02%)</title><rect x="69.1884%" y="149" width="0.0162%" height="15" fill="rgb(247,70,30)" fg:x="8551" fg:w="2"/><text x="69.4384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.05%)</title><rect x="69.2208%" y="149" width="0.0485%" height="15" fill="rgb(212,68,19)" fg:x="8555" fg:w="6"/><text x="69.4708%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.03%)</title><rect x="69.2370%" y="133" width="0.0324%" height="15" fill="rgb(240,187,13)" fg:x="8557" fg:w="4"/><text x="69.4870%" y="143.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="69.2774%" y="149" width="0.0485%" height="15" fill="rgb(223,113,26)" fg:x="8562" fg:w="6"/><text x="69.5274%" y="159.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (3 samples, 0.02%)</title><rect x="69.3017%" y="133" width="0.0243%" height="15" fill="rgb(206,192,2)" fg:x="8565" fg:w="3"/><text x="69.5517%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.07%)</title><rect x="69.3584%" y="53" width="0.0728%" height="15" fill="rgb(241,108,4)" fg:x="8572" fg:w="9"/><text x="69.6084%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.05%)</title><rect x="69.3826%" y="37" width="0.0485%" height="15" fill="rgb(247,173,49)" fg:x="8575" fg:w="6"/><text x="69.6326%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="69.4393%" y="37" width="0.0162%" height="15" fill="rgb(224,114,35)" fg:x="8582" fg:w="2"/><text x="69.6893%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.07%)</title><rect x="69.4393%" y="53" width="0.0728%" height="15" fill="rgb(245,159,27)" fg:x="8582" fg:w="9"/><text x="69.6893%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="69.4635%" y="37" width="0.0485%" height="15" fill="rgb(245,172,44)" fg:x="8585" fg:w="6"/><text x="69.7135%" y="47.50"></text></g><g><title>rust-nexmark`__rdl_alloc (21 samples, 0.17%)</title><rect x="69.3503%" y="117" width="0.1699%" height="15" fill="rgb(236,23,11)" fg:x="8571" fg:w="21"/><text x="69.6003%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (21 samples, 0.17%)</title><rect x="69.3503%" y="101" width="0.1699%" height="15" fill="rgb(205,117,38)" fg:x="8571" fg:w="21"/><text x="69.6003%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (21 samples, 0.17%)</title><rect x="69.3503%" y="85" width="0.1699%" height="15" fill="rgb(237,72,25)" fg:x="8571" fg:w="21"/><text x="69.6003%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (20 samples, 0.16%)</title><rect x="69.3584%" y="69" width="0.1618%" height="15" fill="rgb(244,70,9)" fg:x="8572" fg:w="20"/><text x="69.6084%" y="79.50"></text></g><g><title>rust-nexmark`parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.02%)</title><rect x="69.5445%" y="101" width="0.0243%" height="15" fill="rgb(217,125,39)" fg:x="8595" fg:w="3"/><text x="69.7945%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (338 samples, 2.73%)</title><rect x="69.6416%" y="85" width="2.7348%" height="15" fill="rgb(235,36,10)" fg:x="8607" fg:w="338"/><text x="69.8916%" y="95.50">li..</text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (2 samples, 0.02%)</title><rect x="72.3845%" y="85" width="0.0162%" height="15" fill="rgb(251,123,47)" fg:x="8946" fg:w="2"/><text x="72.6345%" y="95.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::spawn_blocking (398 samples, 3.22%)</title><rect x="69.3260%" y="149" width="3.2203%" height="15" fill="rgb(221,13,13)" fg:x="8568" fg:w="398"/><text x="69.5760%" y="159.50">rus..</text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Spawner::spawn_blocking (398 samples, 3.22%)</title><rect x="69.3260%" y="133" width="3.2203%" height="15" fill="rgb(238,131,9)" fg:x="8568" fg:w="398"/><text x="69.5760%" y="143.50">rus..</text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Spawner::spawn_task (373 samples, 3.02%)</title><rect x="69.5283%" y="117" width="3.0180%" height="15" fill="rgb(211,50,8)" fg:x="8593" fg:w="373"/><text x="69.7783%" y="127.50">rus..</text></g><g><title>rust-nexmark`parking_lot::raw_mutex::RawMutex::unlock_slow (368 samples, 2.98%)</title><rect x="69.5687%" y="101" width="2.9776%" height="15" fill="rgb(245,182,24)" fg:x="8598" fg:w="368"/><text x="69.8187%" y="111.50">rus..</text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (17 samples, 0.14%)</title><rect x="72.4088%" y="85" width="0.1376%" height="15" fill="rgb(242,14,37)" fg:x="8949" fg:w="17"/><text x="72.6588%" y="95.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (14 samples, 0.11%)</title><rect x="72.4330%" y="69" width="0.1133%" height="15" fill="rgb(246,228,12)" fg:x="8952" fg:w="14"/><text x="72.6830%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (13 samples, 0.11%)</title><rect x="72.4411%" y="53" width="0.1052%" height="15" fill="rgb(213,55,15)" fg:x="8953" fg:w="13"/><text x="72.6911%" y="63.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (12 samples, 0.10%)</title><rect x="72.5544%" y="149" width="0.0971%" height="15" fill="rgb(209,9,3)" fg:x="8967" fg:w="12"/><text x="72.8044%" y="159.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (483 samples, 3.91%)</title><rect x="68.7515%" y="181" width="3.9081%" height="15" fill="rgb(230,59,30)" fg:x="8497" fg:w="483"/><text x="69.0015%" y="191.50">rust..</text></g><g><title>rust-nexmark`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (435 samples, 3.52%)</title><rect x="69.1399%" y="165" width="3.5197%" height="15" fill="rgb(209,121,21)" fg:x="8545" fg:w="435"/><text x="69.3899%" y="175.50">rus..</text></g><g><title>rust-nexmark`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (741 samples, 6.00%)</title><rect x="66.7206%" y="197" width="5.9956%" height="15" fill="rgb(220,109,13)" fg:x="8246" fg:w="741"/><text x="66.9706%" y="207.50">rust-nex..</text></g><g><title>rust-nexmark`DYLD-STUB$$memchr (7 samples, 0.06%)</title><rect x="72.6596%" y="181" width="0.0566%" height="15" fill="rgb(232,18,1)" fg:x="8980" fg:w="7"/><text x="72.9096%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="72.7162%" y="197" width="0.0162%" height="15" fill="rgb(215,41,42)" fg:x="8987" fg:w="2"/><text x="72.9662%" y="207.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$free (25 samples, 0.20%)</title><rect x="72.7405%" y="197" width="0.2023%" height="15" fill="rgb(224,123,36)" fg:x="8990" fg:w="25"/><text x="72.9905%" y="207.50"></text></g><g><title>rust-nexmark`atoi::atoi (17 samples, 0.14%)</title><rect x="72.9509%" y="197" width="0.1376%" height="15" fill="rgb(240,125,3)" fg:x="9016" fg:w="17"/><text x="73.2009%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="74.2940%" y="181" width="0.0324%" height="15" fill="rgb(205,98,50)" fg:x="9182" fg:w="4"/><text x="74.5440%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (8 samples, 0.06%)</title><rect x="74.3264%" y="181" width="0.0647%" height="15" fill="rgb(205,185,37)" fg:x="9186" fg:w="8"/><text x="74.5764%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::RestoreOnPending::made_progress (2 samples, 0.02%)</title><rect x="74.3911%" y="181" width="0.0162%" height="15" fill="rgb(238,207,15)" fg:x="9194" fg:w="2"/><text x="74.6411%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (5 samples, 0.04%)</title><rect x="74.4073%" y="181" width="0.0405%" height="15" fill="rgb(213,199,42)" fg:x="9196" fg:w="5"/><text x="74.6573%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.02%)</title><rect x="74.4478%" y="181" width="0.0162%" height="15" fill="rgb(235,201,11)" fg:x="9201" fg:w="2"/><text x="74.6978%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (56 samples, 0.45%)</title><rect x="74.6986%" y="165" width="0.4531%" height="15" fill="rgb(207,46,11)" fg:x="9232" fg:w="56"/><text x="74.9486%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="75.1517%" y="165" width="0.0162%" height="15" fill="rgb(241,35,35)" fg:x="9288" fg:w="2"/><text x="75.4017%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="75.1679%" y="165" width="0.0162%" height="15" fill="rgb(243,32,47)" fg:x="9290" fg:w="2"/><text x="75.4179%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (8 samples, 0.06%)</title><rect x="75.1841%" y="165" width="0.0647%" height="15" fill="rgb(247,202,23)" fg:x="9292" fg:w="8"/><text x="75.4341%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::Budget::decrement (8 samples, 0.06%)</title><rect x="75.2488%" y="165" width="0.0647%" height="15" fill="rgb(219,102,11)" fg:x="9300" fg:w="8"/><text x="75.4988%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (16 samples, 0.13%)</title><rect x="75.3135%" y="165" width="0.1295%" height="15" fill="rgb(243,110,44)" fg:x="9308" fg:w="16"/><text x="75.5635%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (47 samples, 0.38%)</title><rect x="75.4430%" y="165" width="0.3803%" height="15" fill="rgb(222,74,54)" fg:x="9324" fg:w="47"/><text x="75.6930%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::block::is_ready (7 samples, 0.06%)</title><rect x="75.8233%" y="165" width="0.0566%" height="15" fill="rgb(216,99,12)" fg:x="9371" fg:w="7"/><text x="76.0733%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (230 samples, 1.86%)</title><rect x="74.4640%" y="181" width="1.8610%" height="15" fill="rgb(226,22,26)" fg:x="9203" fg:w="230"/><text x="74.7140%" y="191.50">r..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (55 samples, 0.45%)</title><rect x="75.8799%" y="165" width="0.4450%" height="15" fill="rgb(217,163,10)" fg:x="9378" fg:w="55"/><text x="76.1299%" y="175.50"></text></g><g><title>rust-nexmark`core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="76.2764%" y="149" width="0.0485%" height="15" fill="rgb(213,25,53)" fg:x="9427" fg:w="6"/><text x="76.5264%" y="159.50"></text></g><g><title>rust-nexmark`builtins::stream::Stream&lt;T&gt;::recv::_{{closure}} (418 samples, 3.38%)</title><rect x="73.0884%" y="197" width="3.3822%" height="15" fill="rgb(252,105,26)" fg:x="9033" fg:w="418"/><text x="73.3384%" y="207.50">rus..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (18 samples, 0.15%)</title><rect x="76.3249%" y="181" width="0.1456%" height="15" fill="rgb(220,39,43)" fg:x="9433" fg:w="18"/><text x="76.5749%" y="191.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (48 samples, 0.39%)</title><rect x="76.4706%" y="197" width="0.3884%" height="15" fill="rgb(229,68,48)" fg:x="9451" fg:w="48"/><text x="76.7206%" y="207.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (21 samples, 0.17%)</title><rect x="76.6891%" y="181" width="0.1699%" height="15" fill="rgb(252,8,32)" fg:x="9478" fg:w="21"/><text x="76.9391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (14 samples, 0.11%)</title><rect x="77.3202%" y="181" width="0.1133%" height="15" fill="rgb(223,20,43)" fg:x="9556" fg:w="14"/><text x="77.5702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (201 samples, 1.63%)</title><rect x="77.4334%" y="181" width="1.6263%" height="15" fill="rgb(229,81,49)" fg:x="9570" fg:w="201"/><text x="77.6834%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (72 samples, 0.58%)</title><rect x="79.0598%" y="181" width="0.5826%" height="15" fill="rgb(236,28,36)" fg:x="9771" fg:w="72"/><text x="79.3098%" y="191.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (440 samples, 3.56%)</title><rect x="76.8590%" y="197" width="3.5602%" height="15" fill="rgb(249,185,26)" fg:x="9499" fg:w="440"/><text x="77.1090%" y="207.50">rust..</text></g><g><title>libsystem_platform.dylib`_platform_memset (96 samples, 0.78%)</title><rect x="79.6424%" y="181" width="0.7768%" height="15" fill="rgb(249,174,33)" fg:x="9843" fg:w="96"/><text x="79.8924%" y="191.50"></text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (14 samples, 0.11%)</title><rect x="80.4272%" y="197" width="0.1133%" height="15" fill="rgb(233,201,37)" fg:x="9940" fg:w="14"/><text x="80.6772%" y="207.50"></text></g><g><title>rust-nexmark`tokio::io::util::sink::sink (4 samples, 0.03%)</title><rect x="80.5405%" y="197" width="0.0324%" height="15" fill="rgb(221,78,26)" fg:x="9954" fg:w="4"/><text x="80.7905%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::acquire (12 samples, 0.10%)</title><rect x="80.5810%" y="197" width="0.0971%" height="15" fill="rgb(250,127,30)" fg:x="9959" fg:w="12"/><text x="80.8310%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (44 samples, 0.36%)</title><rect x="81.6652%" y="181" width="0.3560%" height="15" fill="rgb(230,49,44)" fg:x="10093" fg:w="44"/><text x="81.9152%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.12%)</title><rect x="82.0212%" y="181" width="0.1214%" height="15" fill="rgb(229,67,23)" fg:x="10137" fg:w="15"/><text x="82.2712%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="82.1426%" y="181" width="0.0405%" height="15" fill="rgb(249,83,47)" fg:x="10152" fg:w="5"/><text x="82.3926%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (50 samples, 0.40%)</title><rect x="82.1830%" y="181" width="0.4046%" height="15" fill="rgb(215,43,3)" fg:x="10157" fg:w="50"/><text x="82.4330%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (12 samples, 0.10%)</title><rect x="82.5876%" y="181" width="0.0971%" height="15" fill="rgb(238,154,13)" fg:x="10207" fg:w="12"/><text x="82.8376%" y="191.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="82.6847%" y="181" width="0.0162%" height="15" fill="rgb(219,56,2)" fg:x="10219" fg:w="2"/><text x="82.9347%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (3 samples, 0.02%)</title><rect x="82.7009%" y="181" width="0.0243%" height="15" fill="rgb(233,0,4)" fg:x="10221" fg:w="3"/><text x="82.9509%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (3 samples, 0.02%)</title><rect x="82.7332%" y="181" width="0.0243%" height="15" fill="rgb(235,30,7)" fg:x="10225" fg:w="3"/><text x="82.9832%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (2 samples, 0.02%)</title><rect x="82.7413%" y="165" width="0.0162%" height="15" fill="rgb(250,79,13)" fg:x="10226" fg:w="2"/><text x="82.9913%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (280 samples, 2.27%)</title><rect x="80.6780%" y="197" width="2.2656%" height="15" fill="rgb(211,146,34)" fg:x="9971" fg:w="280"/><text x="80.9280%" y="207.50">r..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (23 samples, 0.19%)</title><rect x="82.7575%" y="181" width="0.1861%" height="15" fill="rgb(228,22,38)" fg:x="10228" fg:w="23"/><text x="83.0075%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (3 samples, 0.02%)</title><rect x="82.9436%" y="197" width="0.0243%" height="15" fill="rgb(235,168,5)" fg:x="10251" fg:w="3"/><text x="83.1936%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (31 samples, 0.25%)</title><rect x="82.9679%" y="197" width="0.2508%" height="15" fill="rgb(221,155,16)" fg:x="10254" fg:w="31"/><text x="83.2179%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::wake (20 samples, 0.16%)</title><rect x="83.2187%" y="197" width="0.1618%" height="15" fill="rgb(215,215,53)" fg:x="10285" fg:w="20"/><text x="83.4687%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8,797 samples, 71.18%)</title><rect x="12.2502%" y="213" width="71.1789%" height="15" fill="rgb(223,4,10)" fg:x="1514" fg:w="8797"/><text x="12.5002%" y="223.50">rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>rust-nexmark`tokio::util::memchr::memchr (6 samples, 0.05%)</title><rect x="83.3805%" y="197" width="0.0485%" height="15" fill="rgb(234,103,6)" fg:x="10305" fg:w="6"/><text x="83.6305%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8,899 samples, 72.00%)</title><rect x="11.5058%" y="229" width="72.0042%" height="15" fill="rgb(227,97,0)" fg:x="1422" fg:w="8899"/><text x="11.7558%" y="239.50">rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (8 samples, 0.06%)</title><rect x="83.4453%" y="213" width="0.0647%" height="15" fill="rgb(234,150,53)" fg:x="10313" fg:w="8"/><text x="83.6953%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::enter (8,915 samples, 72.13%)</title><rect x="11.3844%" y="293" width="72.1337%" height="15" fill="rgb(228,201,54)" fg:x="1407" fg:w="8915"/><text x="11.6344%" y="303.50">rust-nexmark`tokio::runtime::scheduler::current_thread::Context::enter</text></g><g><title>rust-nexmark`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,910 samples, 72.09%)</title><rect x="11.4249%" y="277" width="72.0932%" height="15" fill="rgb(222,22,37)" fg:x="1412" fg:w="8910"/><text x="11.6749%" y="287.50">rust-nexmark`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rust-nexmark`&lt;tokio::task::local::LocalSet as core::future::future::Future&gt;::poll (8,910 samples, 72.09%)</title><rect x="11.4249%" y="261" width="72.0932%" height="15" fill="rgb(237,53,32)" fg:x="1412" fg:w="8910"/><text x="11.6749%" y="271.50">rust-nexmark`&lt;tokio::task::local::LocalSet as core::future::future::Future&gt;::poll</text></g><g><title>rust-nexmark`tokio::task::local::LocalSet::tick (8,905 samples, 72.05%)</title><rect x="11.4653%" y="245" width="72.0528%" height="15" fill="rgb(233,25,53)" fg:x="1417" fg:w="8905"/><text x="11.7153%" y="255.50">rust-nexmark`tokio::task::local::LocalSet::tick</text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (2 samples, 0.02%)</title><rect x="83.5666%" y="229" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="10328" fg:w="2"/><text x="83.8166%" y="239.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (13 samples, 0.11%)</title><rect x="83.5666%" y="245" width="0.1052%" height="15" fill="rgb(241,220,44)" fg:x="10328" fg:w="13"/><text x="83.8166%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.08%)</title><rect x="83.5909%" y="229" width="0.0809%" height="15" fill="rgb(235,28,35)" fg:x="10331" fg:w="10"/><text x="83.8409%" y="239.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.11%)</title><rect x="83.5666%" y="261" width="0.1133%" height="15" fill="rgb(210,56,17)" fg:x="10328" fg:w="14"/><text x="83.8166%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`kevent (126 samples, 1.02%)</title><rect x="83.6799%" y="245" width="1.0195%" height="15" fill="rgb(224,130,29)" fg:x="10342" fg:w="126"/><text x="83.9299%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::io::driver::Driver::turn (127 samples, 1.03%)</title><rect x="83.6799%" y="261" width="1.0276%" height="15" fill="rgb(235,212,8)" fg:x="10342" fg:w="127"/><text x="83.9299%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::Driver::park_internal (147 samples, 1.19%)</title><rect x="83.5424%" y="277" width="1.1894%" height="15" fill="rgb(223,33,50)" fg:x="10325" fg:w="147"/><text x="83.7924%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::level::Level::next_expiration (3 samples, 0.02%)</title><rect x="84.7075%" y="261" width="0.0243%" height="15" fill="rgb(219,149,13)" fg:x="10469" fg:w="3"/><text x="84.9575%" y="271.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (2 samples, 0.02%)</title><rect x="84.7318%" y="261" width="0.0162%" height="15" fill="rgb(250,156,29)" fg:x="10472" fg:w="2"/><text x="84.9818%" y="271.50"></text></g><g><title> 32]&gt; (2 samples, 0.02%)</title><rect x="84.7318%" y="245" width="0.0162%" height="15" fill="rgb(216,193,19)" fg:x="10472" fg:w="2"/><text x="84.9818%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.02%)</title><rect x="84.7480%" y="261" width="0.0243%" height="15" fill="rgb(216,135,14)" fg:x="10474" fg:w="3"/><text x="84.9980%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::poll (6 samples, 0.05%)</title><rect x="84.7722%" y="261" width="0.0485%" height="15" fill="rgb(241,47,5)" fg:x="10477" fg:w="6"/><text x="85.0222%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::next_expiration (5 samples, 0.04%)</title><rect x="84.7803%" y="245" width="0.0405%" height="15" fill="rgb(233,42,35)" fg:x="10478" fg:w="5"/><text x="85.0303%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (12 samples, 0.10%)</title><rect x="84.7318%" y="277" width="0.0971%" height="15" fill="rgb(231,13,6)" fg:x="10472" fg:w="12"/><text x="84.9818%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::park (163 samples, 1.32%)</title><rect x="83.5181%" y="293" width="1.3189%" height="15" fill="rgb(207,181,40)" fg:x="10322" fg:w="163"/><text x="83.7681%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.05%)</title><rect x="84.8774%" y="245" width="0.0485%" height="15" fill="rgb(254,173,49)" fg:x="10490" fg:w="6"/><text x="85.1274%" y="255.50"></text></g><g><title>rust-nexmark`&lt;time::time::Time as core::cmp::Ord&gt;::cmp (13 samples, 0.11%)</title><rect x="84.9260%" y="245" width="0.1052%" height="15" fill="rgb(221,1,38)" fg:x="10496" fg:w="13"/><text x="85.1760%" y="255.50"></text></g><g><title>rust-nexmark`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.08%)</title><rect x="85.0312%" y="245" width="0.0809%" height="15" fill="rgb(206,124,46)" fg:x="10509" fg:w="10"/><text x="85.2812%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (70 samples, 0.57%)</title><rect x="87.9116%" y="213" width="0.5664%" height="15" fill="rgb(249,21,11)" fg:x="10865" fg:w="70"/><text x="88.1616%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="88.4780%" y="213" width="0.0647%" height="15" fill="rgb(222,201,40)" fg:x="10935" fg:w="8"/><text x="88.7280%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (2 samples, 0.02%)</title><rect x="88.5428%" y="213" width="0.0162%" height="15" fill="rgb(235,61,29)" fg:x="10943" fg:w="2"/><text x="88.7928%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="88.5589%" y="213" width="0.0243%" height="15" fill="rgb(219,207,3)" fg:x="10945" fg:w="3"/><text x="88.8089%" y="223.50"></text></g><g><title>rust-nexmark`tokio::macros::support::thread_rng_n (9 samples, 0.07%)</title><rect x="88.5832%" y="213" width="0.0728%" height="15" fill="rgb(222,56,46)" fg:x="10948" fg:w="9"/><text x="88.8332%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::RestoreOnPending::made_progress (5 samples, 0.04%)</title><rect x="88.6560%" y="213" width="0.0405%" height="15" fill="rgb(239,76,54)" fg:x="10957" fg:w="5"/><text x="88.9060%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (6 samples, 0.05%)</title><rect x="88.6965%" y="213" width="0.0485%" height="15" fill="rgb(231,124,27)" fg:x="10962" fg:w="6"/><text x="88.9465%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.02%)</title><rect x="88.7450%" y="213" width="0.0162%" height="15" fill="rgb(249,195,6)" fg:x="10968" fg:w="2"/><text x="88.9950%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (95 samples, 0.77%)</title><rect x="88.9635%" y="197" width="0.7687%" height="15" fill="rgb(237,174,47)" fg:x="10995" fg:w="95"/><text x="89.2135%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="89.7322%" y="197" width="0.0647%" height="15" fill="rgb(206,201,31)" fg:x="11090" fg:w="8"/><text x="89.9822%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (11 samples, 0.09%)</title><rect x="89.7969%" y="197" width="0.0890%" height="15" fill="rgb(231,57,52)" fg:x="11098" fg:w="11"/><text x="90.0469%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::Budget::decrement (2 samples, 0.02%)</title><rect x="89.8859%" y="197" width="0.0162%" height="15" fill="rgb(248,177,22)" fg:x="11109" fg:w="2"/><text x="90.1359%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (11 samples, 0.09%)</title><rect x="89.9021%" y="197" width="0.0890%" height="15" fill="rgb(215,211,37)" fg:x="11111" fg:w="11"/><text x="90.1521%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (28 samples, 0.23%)</title><rect x="89.9911%" y="197" width="0.2266%" height="15" fill="rgb(241,128,51)" fg:x="11122" fg:w="28"/><text x="90.2411%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::block::is_ready (5 samples, 0.04%)</title><rect x="90.2177%" y="197" width="0.0405%" height="15" fill="rgb(227,165,31)" fg:x="11150" fg:w="5"/><text x="90.4677%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (248 samples, 2.01%)</title><rect x="88.7612%" y="213" width="2.0066%" height="15" fill="rgb(228,167,24)" fg:x="10970" fg:w="248"/><text x="89.0112%" y="223.50">r..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (63 samples, 0.51%)</title><rect x="90.2581%" y="197" width="0.5097%" height="15" fill="rgb(228,143,12)" fg:x="11155" fg:w="63"/><text x="90.5081%" y="207.50"></text></g><g><title>rust-nexmark`core::sync::atomic::atomic_compare_exchange (4 samples, 0.03%)</title><rect x="90.7355%" y="181" width="0.0324%" height="15" fill="rgb(249,149,8)" fg:x="11214" fg:w="4"/><text x="90.9855%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (81 samples, 0.66%)</title><rect x="90.7679%" y="213" width="0.6554%" height="15" fill="rgb(243,35,44)" fg:x="11218" fg:w="81"/><text x="91.0179%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (66 samples, 0.53%)</title><rect x="91.4394%" y="197" width="0.5340%" height="15" fill="rgb(246,89,9)" fg:x="11301" fg:w="66"/><text x="91.6894%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::clone_waker (3 samples, 0.02%)</title><rect x="92.0706%" y="165" width="0.0243%" height="15" fill="rgb(233,213,13)" fg:x="11379" fg:w="3"/><text x="92.3206%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::drop_waker (6 samples, 0.05%)</title><rect x="92.0948%" y="165" width="0.0485%" height="15" fill="rgb(233,141,41)" fg:x="11382" fg:w="6"/><text x="92.3448%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::entry::TimerEntry::poll_elapsed (23 samples, 0.19%)</title><rect x="92.0544%" y="181" width="0.1861%" height="15" fill="rgb(239,167,4)" fg:x="11377" fg:w="23"/><text x="92.3044%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (12 samples, 0.10%)</title><rect x="92.1434%" y="165" width="0.0971%" height="15" fill="rgb(209,217,16)" fg:x="11388" fg:w="12"/><text x="92.3934%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (35 samples, 0.28%)</title><rect x="91.9735%" y="197" width="0.2832%" height="15" fill="rgb(219,88,35)" fg:x="11367" fg:w="35"/><text x="92.2235%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.02%)</title><rect x="92.2405%" y="181" width="0.0162%" height="15" fill="rgb(220,193,23)" fg:x="11400" fg:w="2"/><text x="92.4905%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (673 samples, 5.45%)</title><rect x="86.8355%" y="229" width="5.4454%" height="15" fill="rgb(230,90,52)" fg:x="10732" fg:w="673"/><text x="87.0855%" y="239.50">rust-ne..</text></g><g><title>rust-nexmark`tokio::time::interval::Interval::poll_tick (106 samples, 0.86%)</title><rect x="91.4233%" y="213" width="0.8577%" height="15" fill="rgb(252,106,19)" fg:x="11299" fg:w="106"/><text x="91.6733%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::entry::TimerEntry::poll_elapsed (3 samples, 0.02%)</title><rect x="92.2567%" y="197" width="0.0243%" height="15" fill="rgb(206,74,20)" fg:x="11402" fg:w="3"/><text x="92.5067%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="92.2809%" y="229" width="0.0243%" height="15" fill="rgb(230,138,44)" fg:x="11405" fg:w="3"/><text x="92.5309%" y="239.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="92.3052%" y="229" width="0.0243%" height="15" fill="rgb(235,182,43)" fg:x="11408" fg:w="3"/><text x="92.5552%" y="239.50"></text></g><g><title>rust-nexmark`builtins::time::Time::from_milliseconds (10 samples, 0.08%)</title><rect x="92.3295%" y="229" width="0.0809%" height="15" fill="rgb(242,16,51)" fg:x="11411" fg:w="10"/><text x="92.5795%" y="239.50"></text></g><g><title>rust-nexmark`__divti3 (9 samples, 0.07%)</title><rect x="92.6693%" y="197" width="0.0728%" height="15" fill="rgb(248,9,4)" fg:x="11453" fg:w="9"/><text x="92.9193%" y="207.50"></text></g><g><title>rust-nexmark`time::date::Date::from_julian_day_unchecked (22 samples, 0.18%)</title><rect x="92.7421%" y="197" width="0.1780%" height="15" fill="rgb(210,31,22)" fg:x="11462" fg:w="22"/><text x="92.9921%" y="207.50"></text></g><g><title>rust-nexmark`__divti3 (4 samples, 0.03%)</title><rect x="93.1143%" y="181" width="0.0324%" height="15" fill="rgb(239,54,39)" fg:x="11508" fg:w="4"/><text x="93.3643%" y="191.50"></text></g><g><title>rust-nexmark`compiler_builtins::int::specialized_div_rem::u128_div_rem (10 samples, 0.08%)</title><rect x="93.1467%" y="181" width="0.0809%" height="15" fill="rgb(230,99,41)" fg:x="11512" fg:w="10"/><text x="93.3967%" y="191.50"></text></g><g><title>rust-nexmark`time::date::Date::from_julian_day_unchecked (30 samples, 0.24%)</title><rect x="93.2276%" y="181" width="0.2427%" height="15" fill="rgb(253,106,12)" fg:x="11522" fg:w="30"/><text x="93.4776%" y="191.50"></text></g><g><title>rust-nexmark`builtins::time::Time::from_milliseconds (130 samples, 1.05%)</title><rect x="92.5318%" y="213" width="1.0519%" height="15" fill="rgb(213,46,41)" fg:x="11436" fg:w="130"/><text x="92.7818%" y="223.50"></text></g><g><title>rust-nexmark`time::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos (82 samples, 0.66%)</title><rect x="92.9201%" y="197" width="0.6635%" height="15" fill="rgb(215,133,35)" fg:x="11484" fg:w="82"/><text x="93.1701%" y="207.50"></text></g><g><title>rust-nexmark`time_core::util::is_leap_year (14 samples, 0.11%)</title><rect x="93.4703%" y="181" width="0.1133%" height="15" fill="rgb(213,28,5)" fg:x="11552" fg:w="14"/><text x="93.7203%" y="191.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (23 samples, 0.19%)</title><rect x="93.5836%" y="213" width="0.1861%" height="15" fill="rgb(215,77,49)" fg:x="11566" fg:w="23"/><text x="93.8336%" y="223.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (188 samples, 1.52%)</title><rect x="92.4104%" y="229" width="1.5212%" height="15" fill="rgb(248,100,22)" fg:x="11421" fg:w="188"/><text x="92.6604%" y="239.50"></text></g><g><title>rust-nexmark`time::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos (20 samples, 0.16%)</title><rect x="93.7697%" y="213" width="0.1618%" height="15" fill="rgb(208,67,9)" fg:x="11589" fg:w="20"/><text x="94.0197%" y="223.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (3 samples, 0.02%)</title><rect x="93.9315%" y="229" width="0.0243%" height="15" fill="rgb(219,133,21)" fg:x="11609" fg:w="3"/><text x="94.1815%" y="239.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;builtins::stream::Event&lt;rust_nexmark::Bid&gt;&gt;::send::{{closure}}&gt; (4 samples, 0.03%)</title><rect x="93.9558%" y="229" width="0.0324%" height="15" fill="rgb(246,46,29)" fg:x="11612" fg:w="4"/><text x="94.2058%" y="239.50"></text></g><g><title>rust-nexmark`time::date::Date::ordinal (8 samples, 0.06%)</title><rect x="93.9882%" y="229" width="0.0647%" height="15" fill="rgb(246,185,52)" fg:x="11616" fg:w="8"/><text x="94.2382%" y="239.50"></text></g><g><title>rust-nexmark`time::date::Date::year (12 samples, 0.10%)</title><rect x="94.0529%" y="229" width="0.0971%" height="15" fill="rgb(252,136,11)" fg:x="11624" fg:w="12"/><text x="94.3029%" y="239.50"></text></g><g><title>rust-nexmark`time::date_time::DateTime&lt;O&gt;::to_offset_raw (112 samples, 0.91%)</title><rect x="94.1500%" y="229" width="0.9062%" height="15" fill="rgb(219,138,53)" fg:x="11636" fg:w="112"/><text x="94.4000%" y="239.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::minutes_past_hour (22 samples, 0.18%)</title><rect x="95.0562%" y="229" width="0.1780%" height="15" fill="rgb(211,51,23)" fg:x="11748" fg:w="22"/><text x="95.3062%" y="239.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::seconds_past_minute (28 samples, 0.23%)</title><rect x="95.2342%" y="229" width="0.2266%" height="15" fill="rgb(247,221,28)" fg:x="11770" fg:w="28"/><text x="95.4842%" y="239.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::whole_hours (23 samples, 0.19%)</title><rect x="95.4608%" y="229" width="0.1861%" height="15" fill="rgb(251,222,45)" fg:x="11798" fg:w="23"/><text x="95.7108%" y="239.50"></text></g><g><title>rust-nexmark`tokio::macros::support::thread_rng_n (3 samples, 0.02%)</title><rect x="95.6469%" y="229" width="0.0243%" height="15" fill="rgb(217,162,53)" fg:x="11821" fg:w="3"/><text x="95.8969%" y="239.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::acquire (15 samples, 0.12%)</title><rect x="95.6712%" y="229" width="0.1214%" height="15" fill="rgb(229,93,14)" fg:x="11824" fg:w="15"/><text x="95.9212%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (58 samples, 0.47%)</title><rect x="96.9658%" y="213" width="0.4693%" height="15" fill="rgb(209,67,49)" fg:x="11984" fg:w="58"/><text x="97.2158%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (61 samples, 0.49%)</title><rect x="97.4351%" y="213" width="0.4936%" height="15" fill="rgb(213,87,29)" fg:x="12042" fg:w="61"/><text x="97.6851%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (8 samples, 0.06%)</title><rect x="97.9286%" y="213" width="0.0647%" height="15" fill="rgb(205,151,52)" fg:x="12103" fg:w="8"/><text x="98.1786%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (40 samples, 0.32%)</title><rect x="97.9934%" y="213" width="0.3237%" height="15" fill="rgb(253,215,39)" fg:x="12111" fg:w="40"/><text x="98.2434%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="98.3170%" y="213" width="0.0405%" height="15" fill="rgb(221,220,41)" fg:x="12151" fg:w="5"/><text x="98.5670%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (57 samples, 0.46%)</title><rect x="98.3575%" y="213" width="0.4612%" height="15" fill="rgb(218,133,21)" fg:x="12156" fg:w="57"/><text x="98.6075%" y="223.50"></text></g><g><title>rust-nexmark`tokio::task::local::Shared::schedule (56 samples, 0.45%)</title><rect x="98.3656%" y="197" width="0.4531%" height="15" fill="rgb(221,193,43)" fg:x="12157" fg:w="56"/><text x="98.6156%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::scheduler::current_thread::Handle as tokio::util::wake::Wake&gt;::wake (53 samples, 0.43%)</title><rect x="98.3898%" y="181" width="0.4288%" height="15" fill="rgb(240,128,52)" fg:x="12160" fg:w="53"/><text x="98.6398%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::driver::Handle::unpark (53 samples, 0.43%)</title><rect x="98.3898%" y="165" width="0.4288%" height="15" fill="rgb(253,114,12)" fg:x="12160" fg:w="53"/><text x="98.6398%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`kevent (53 samples, 0.43%)</title><rect x="98.3898%" y="149" width="0.4288%" height="15" fill="rgb(215,223,47)" fg:x="12160" fg:w="53"/><text x="98.6398%" y="159.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (392 samples, 3.17%)</title><rect x="95.7925%" y="229" width="3.1718%" height="15" fill="rgb(248,225,23)" fg:x="11839" fg:w="392"/><text x="96.0425%" y="239.50">rus..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (18 samples, 0.15%)</title><rect x="98.8187%" y="213" width="0.1456%" height="15" fill="rgb(250,108,0)" fg:x="12213" fg:w="18"/><text x="99.0687%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (10 samples, 0.08%)</title><rect x="98.9643%" y="229" width="0.0809%" height="15" fill="rgb(228,208,7)" fg:x="12231" fg:w="10"/><text x="99.2143%" y="239.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (22 samples, 0.18%)</title><rect x="99.0452%" y="229" width="0.1780%" height="15" fill="rgb(244,45,10)" fg:x="12241" fg:w="22"/><text x="99.2952%" y="239.50"></text></g><g><title>rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_source_event_time::_{{closure}} (1,765 samples, 14.28%)</title><rect x="85.1121%" y="245" width="14.2811%" height="15" fill="rgb(207,125,25)" fg:x="10519" fg:w="1765"/><text x="85.3621%" y="255.50">rust-nexmark`builtins:..</text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::wake (21 samples, 0.17%)</title><rect x="99.2232%" y="229" width="0.1699%" height="15" fill="rgb(210,195,18)" fg:x="12263" fg:w="21"/><text x="99.4732%" y="239.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (5 samples, 0.04%)</title><rect x="99.3932%" y="245" width="0.0405%" height="15" fill="rgb(249,80,12)" fg:x="12284" fg:w="5"/><text x="99.6432%" y="255.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;builtins::stream::Event&lt;rust_nexmark::Bid&gt;&gt;::send::{{closure}}&gt; (12 samples, 0.10%)</title><rect x="99.4336%" y="245" width="0.0971%" height="15" fill="rgb(221,65,9)" fg:x="12289" fg:w="12"/><text x="99.6836%" y="255.50"></text></g><g><title>rust-nexmark`time::date_time::DateTime&lt;O&gt;::to_offset_raw (37 samples, 0.30%)</title><rect x="99.5307%" y="245" width="0.2994%" height="15" fill="rgb(235,49,36)" fg:x="12301" fg:w="37"/><text x="99.7807%" y="255.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (8 samples, 0.06%)</title><rect x="99.8301%" y="245" width="0.0647%" height="15" fill="rgb(225,32,20)" fg:x="12338" fg:w="8"/><text x="100.0801%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,858 samples, 15.03%)</title><rect x="84.8774%" y="261" width="15.0336%" height="15" fill="rgb(215,141,46)" fg:x="10490" fg:w="1858"/><text x="85.1274%" y="271.50">rust-nexmark`tokio::run..</text></g><g><title>rust-nexmark`tokio::time::interval::Interval::tick (2 samples, 0.02%)</title><rect x="99.8948%" y="245" width="0.0162%" height="15" fill="rgb(250,160,47)" fg:x="12346" fg:w="2"/><text x="100.1448%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (10,951 samples, 88.61%)</title><rect x="11.3116%" y="309" width="88.6075%" height="15" fill="rgb(216,222,40)" fg:x="1398" fg:w="10951"/><text x="11.5616%" y="319.50">rust-nexmark`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::run_task (1,864 samples, 15.08%)</title><rect x="84.8370%" y="293" width="15.0821%" height="15" fill="rgb(234,217,39)" fg:x="10485" fg:w="1864"/><text x="85.0870%" y="303.50">rust-nexmark`tokio::run..</text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,860 samples, 15.05%)</title><rect x="84.8693%" y="277" width="15.0498%" height="15" fill="rgb(207,178,40)" fg:x="10489" fg:w="1860"/><text x="85.1193%" y="287.50">rust-nexmark`tokio::run..</text></g><g><title>rust-nexmark`tokio::runtime::runtime::Runtime::block_on (10,954 samples, 88.63%)</title><rect x="11.3116%" y="389" width="88.6318%" height="15" fill="rgb(221,136,13)" fg:x="1398" fg:w="10954"/><text x="11.5616%" y="399.50">rust-nexmark`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::CurrentThread::block_on (10,954 samples, 88.63%)</title><rect x="11.3116%" y="373" width="88.6318%" height="15" fill="rgb(249,199,10)" fg:x="1398" fg:w="10954"/><text x="11.5616%" y="383.50">rust-nexmark`tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>rust-nexmark`tokio::runtime::context::runtime::enter_runtime (10,954 samples, 88.63%)</title><rect x="11.3116%" y="357" width="88.6318%" height="15" fill="rgb(249,222,13)" fg:x="1398" fg:w="10954"/><text x="11.5616%" y="367.50">rust-nexmark`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::CoreGuard::block_on (10,954 samples, 88.63%)</title><rect x="11.3116%" y="341" width="88.6318%" height="15" fill="rgb(244,185,38)" fg:x="1398" fg:w="10954"/><text x="11.5616%" y="351.50">rust-nexmark`tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>rust-nexmark`tokio::runtime::context::set_scheduler (10,954 samples, 88.63%)</title><rect x="11.3116%" y="325" width="88.6318%" height="15" fill="rgb(236,202,9)" fg:x="1398" fg:w="10954"/><text x="11.5616%" y="335.50">rust-nexmark`tokio::runtime::context::set_scheduler</text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.03%)</title><rect x="99.9434%" y="389" width="0.0324%" height="15" fill="rgb(250,229,37)" fg:x="12352" fg:w="4"/><text x="100.1934%" y="399.50"></text></g><g><title>all (12,359 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="12359"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (12,356 samples, 99.98%)</title><rect x="0.0243%" y="469" width="99.9757%" height="15" fill="rgb(211,33,43)" fg:x="3" fg:w="12356"/><text x="0.2743%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (12,356 samples, 99.98%)</title><rect x="0.0243%" y="453" width="99.9757%" height="15" fill="rgb(245,58,50)" fg:x="3" fg:w="12356"/><text x="0.2743%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust-nexmark`std::sys::unix::thread::Thread::new::thread_start (12,356 samples, 99.98%)</title><rect x="0.0243%" y="437" width="99.9757%" height="15" fill="rgb(244,68,36)" fg:x="3" fg:w="12356"/><text x="0.2743%" y="447.50">rust-nexmark`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once{{vtable.shim}} (12,356 samples, 99.98%)</title><rect x="0.0243%" y="421" width="99.9757%" height="15" fill="rgb(232,229,15)" fg:x="3" fg:w="12356"/><text x="0.2743%" y="431.50">rust-nexmark`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace (12,356 samples, 99.98%)</title><rect x="0.0243%" y="405" width="99.9757%" height="15" fill="rgb(254,30,23)" fg:x="3" fg:w="12356"/><text x="0.2743%" y="415.50">rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-nexmark`tokio::runtime::task::raw::poll (3 samples, 0.02%)</title><rect x="99.9757%" y="389" width="0.0243%" height="15" fill="rgb(235,160,14)" fg:x="12356" fg:w="3"/><text x="100.2257%" y="399.50"></text></g></svg></svg>