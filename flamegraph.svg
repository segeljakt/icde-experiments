<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="7893"><g><title>rust-nexmark`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0127%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.01%)</title><rect x="0.0127%" y="373" width="0.0127%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2627%" y="383.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.01%)</title><rect x="0.0127%" y="357" width="0.0127%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2627%" y="367.50"></text></g><g><title>rust-nexmark`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.01%)</title><rect x="0.0127%" y="341" width="0.0127%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2627%" y="351.50"></text></g><g><title>rust-nexmark`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="0.0127%" y="325" width="0.0127%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2627%" y="335.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.01%)</title><rect x="0.0127%" y="309" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2627%" y="319.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.01%)</title><rect x="0.0127%" y="293" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2627%" y="303.50"></text></g><g><title>libobjc.A.dylib`initializeAndMaybeRelock(objc_class*, objc_object*, locker_mixin&lt;lockdebug::lock_mixin (1 samples, 0.01%)</title><rect x="0.0127%" y="277" width="0.0127%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2627%" y="287.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.01%)</title><rect x="0.0127%" y="261" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2627%" y="271.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.01%)</title><rect x="0.0127%" y="245" width="0.0127%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2627%" y="255.50"></text></g><g><title>libobjc.A.dylib`CALLING_SOME_+initialize_METHOD (1 samples, 0.01%)</title><rect x="0.0127%" y="229" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2627%" y="239.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.01%)</title><rect x="0.0127%" y="213" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2627%" y="223.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.01%)</title><rect x="0.0127%" y="197" width="0.0127%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2627%" y="207.50"></text></g><g><title>libobjc.A.dylib`getMethodFromRelativeList(relative_list_list_t&lt;method_list_t&gt;*, objc_selector*) (1 samples, 0.01%)</title><rect x="0.0127%" y="181" width="0.0127%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2627%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::builder::Builder::new (1 samples, 0.01%)</title><rect x="0.0253%" y="373" width="0.0127%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2753%" y="383.50"></text></g><g><title>rust-nexmark`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.01%)</title><rect x="0.0253%" y="357" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2753%" y="367.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.23%)</title><rect x="0.1014%" y="277" width="0.2281%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="18"/><text x="0.3514%" y="287.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.3294%" y="277" width="0.0127%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="1"/><text x="0.5794%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::Budget::initial (3 samples, 0.04%)</title><rect x="0.3421%" y="277" width="0.0380%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="3"/><text x="0.5921%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::metrics::mock::MetricsBatch::start_poll (2 samples, 0.03%)</title><rect x="0.3801%" y="277" width="0.0253%" height="15" fill="rgb(226,26,5)" fg:x="30" fg:w="2"/><text x="0.6301%" y="287.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (3 samples, 0.04%)</title><rect x="0.4181%" y="261" width="0.0380%" height="15" fill="rgb(249,33,26)" fg:x="33" fg:w="3"/><text x="0.6681%" y="271.50"></text></g><g><title> 32]&gt; (3 samples, 0.04%)</title><rect x="0.4181%" y="245" width="0.0380%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="3"/><text x="0.6681%" y="255.50"></text></g><g><title>rust-nexmark`std::time::Instant::now (1 samples, 0.01%)</title><rect x="0.4561%" y="261" width="0.0127%" height="15" fill="rgb(221,5,38)" fg:x="36" fg:w="1"/><text x="0.7061%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::signal::Driver::process (1 samples, 0.01%)</title><rect x="0.4688%" y="261" width="0.0127%" height="15" fill="rgb(247,18,42)" fg:x="37" fg:w="1"/><text x="0.7188%" y="271.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$clock_gettime (1 samples, 0.01%)</title><rect x="0.4814%" y="245" width="0.0127%" height="15" fill="rgb(241,131,45)" fg:x="38" fg:w="1"/><text x="0.7314%" y="255.50"></text></g><g><title>rust-nexmark`mio::poll::Poll::poll (1 samples, 0.01%)</title><rect x="0.4941%" y="245" width="0.0127%" height="15" fill="rgb(249,31,29)" fg:x="39" fg:w="1"/><text x="0.7441%" y="255.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (2 samples, 0.03%)</title><rect x="0.5068%" y="213" width="0.0253%" height="15" fill="rgb(225,111,53)" fg:x="40" fg:w="2"/><text x="0.7568%" y="223.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (1 samples, 0.01%)</title><rect x="0.5321%" y="213" width="0.0127%" height="15" fill="rgb(238,160,17)" fg:x="42" fg:w="1"/><text x="0.7821%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.14%)</title><rect x="0.5448%" y="213" width="0.1394%" height="15" fill="rgb(214,148,48)" fg:x="43" fg:w="11"/><text x="0.7948%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (15 samples, 0.19%)</title><rect x="0.5068%" y="229" width="0.1900%" height="15" fill="rgb(232,36,49)" fg:x="40" fg:w="15"/><text x="0.7568%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.01%)</title><rect x="0.6842%" y="213" width="0.0127%" height="15" fill="rgb(209,103,24)" fg:x="54" fg:w="1"/><text x="0.9342%" y="223.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (17 samples, 0.22%)</title><rect x="0.5068%" y="245" width="0.2154%" height="15" fill="rgb(229,88,8)" fg:x="40" fg:w="17"/><text x="0.7568%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="0.6968%" y="229" width="0.0253%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="2"/><text x="0.9468%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`kevent (125 samples, 1.58%)</title><rect x="0.7602%" y="229" width="1.5837%" height="15" fill="rgb(254,191,54)" fg:x="60" fg:w="125"/><text x="1.0102%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::Driver::park_internal (148 samples, 1.88%)</title><rect x="0.4814%" y="261" width="1.8751%" height="15" fill="rgb(241,83,37)" fg:x="38" fg:w="148"/><text x="0.7314%" y="271.50">r..</text></g><g><title>rust-nexmark`tokio::runtime::io::driver::Driver::turn (129 samples, 1.63%)</title><rect x="0.7222%" y="245" width="1.6344%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="129"/><text x="0.9722%" y="255.50"></text></g><g><title>rust-nexmark`mio::poll::Poll::poll (1 samples, 0.01%)</title><rect x="2.3438%" y="229" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="185" fg:w="1"/><text x="2.5938%" y="239.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (1 samples, 0.01%)</title><rect x="2.3692%" y="245" width="0.0127%" height="15" fill="rgb(245,192,40)" fg:x="187" fg:w="1"/><text x="2.6192%" y="255.50"></text></g><g><title> 32]&gt; (1 samples, 0.01%)</title><rect x="2.3692%" y="229" width="0.0127%" height="15" fill="rgb(238,167,29)" fg:x="187" fg:w="1"/><text x="2.6192%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.01%)</title><rect x="2.3819%" y="245" width="0.0127%" height="15" fill="rgb(232,182,51)" fg:x="188" fg:w="1"/><text x="2.6319%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (5 samples, 0.06%)</title><rect x="2.3565%" y="261" width="0.0633%" height="15" fill="rgb(231,60,39)" fg:x="186" fg:w="5"/><text x="2.6065%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::poll (2 samples, 0.03%)</title><rect x="2.3945%" y="245" width="0.0253%" height="15" fill="rgb(208,69,12)" fg:x="189" fg:w="2"/><text x="2.6445%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.01%)</title><rect x="2.4072%" y="229" width="0.0127%" height="15" fill="rgb(235,93,37)" fg:x="190" fg:w="1"/><text x="2.6572%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::park (162 samples, 2.05%)</title><rect x="0.4054%" y="277" width="2.0525%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="162"/><text x="0.6554%" y="287.50">r..</text></g><g><title>rust-nexmark`tokio::runtime::time::wheel::Wheel::poll (3 samples, 0.04%)</title><rect x="2.4199%" y="261" width="0.0380%" height="15" fill="rgb(222,207,29)" fg:x="191" fg:w="3"/><text x="2.6699%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.22%)</title><rect x="2.6479%" y="261" width="0.2154%" height="15" fill="rgb(206,96,30)" fg:x="209" fg:w="17"/><text x="2.8979%" y="271.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.8633%" y="261" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="226" fg:w="1"/><text x="3.1133%" y="271.50"></text></g><g><title>rust-nexmark`builtins::stream::filter::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::filter::_{{closure}} (4 samples, 0.05%)</title><rect x="3.0533%" y="245" width="0.0507%" height="15" fill="rgb(250,191,14)" fg:x="241" fg:w="4"/><text x="3.3033%" y="255.50"></text></g><g><title>rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_source_event_time::_{{closure}} (3 samples, 0.04%)</title><rect x="3.1040%" y="245" width="0.0380%" height="15" fill="rgb(239,60,40)" fg:x="245" fg:w="3"/><text x="3.3540%" y="255.50"></text></g><g><title>rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_source_reader::_{{closure}} (2 samples, 0.03%)</title><rect x="3.1420%" y="245" width="0.0253%" height="15" fill="rgb(206,27,48)" fg:x="248" fg:w="2"/><text x="3.3920%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.43%)</title><rect x="3.2560%" y="229" width="0.4308%" height="15" fill="rgb(225,35,8)" fg:x="257" fg:w="34"/><text x="3.5060%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.10%)</title><rect x="3.6868%" y="229" width="0.1014%" height="15" fill="rgb(250,213,24)" fg:x="291" fg:w="8"/><text x="3.9368%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.37%)</title><rect x="3.7882%" y="229" width="0.3674%" height="15" fill="rgb(247,123,22)" fg:x="299" fg:w="29"/><text x="4.0382%" y="239.50"></text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_struct (13 samples, 0.16%)</title><rect x="4.1556%" y="229" width="0.1647%" height="15" fill="rgb(231,138,38)" fg:x="328" fg:w="13"/><text x="4.4056%" y="239.50"></text></g><g><title>rust-nexmark`&lt;time::time::Time as core::cmp::Ord&gt;::cmp (5 samples, 0.06%)</title><rect x="4.3203%" y="229" width="0.0633%" height="15" fill="rgb(231,145,46)" fg:x="341" fg:w="5"/><text x="4.5703%" y="239.50"></text></g><g><title>rust-nexmark`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.19%)</title><rect x="4.3836%" y="229" width="0.1900%" height="15" fill="rgb(251,118,11)" fg:x="346" fg:w="15"/><text x="4.6336%" y="239.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (6 samples, 0.08%)</title><rect x="4.5737%" y="229" width="0.0760%" height="15" fill="rgb(217,147,25)" fg:x="361" fg:w="6"/><text x="4.8237%" y="239.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.6497%" y="229" width="0.0127%" height="15" fill="rgb(247,81,37)" fg:x="367" fg:w="1"/><text x="4.8997%" y="239.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$free (6 samples, 0.08%)</title><rect x="4.6624%" y="229" width="0.0760%" height="15" fill="rgb(209,12,38)" fg:x="368" fg:w="6"/><text x="4.9124%" y="239.50"></text></g><g><title>rust-nexmark`builtins::stream::Stream&lt;T&gt;::recv::_{{closure}} (12 samples, 0.15%)</title><rect x="4.7384%" y="229" width="0.1520%" height="15" fill="rgb(227,1,9)" fg:x="374" fg:w="12"/><text x="4.9884%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (5 samples, 0.06%)</title><rect x="5.1311%" y="213" width="0.0633%" height="15" fill="rgb(248,47,43)" fg:x="405" fg:w="5"/><text x="5.3811%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (69 samples, 0.87%)</title><rect x="5.1945%" y="213" width="0.8742%" height="15" fill="rgb(221,10,30)" fg:x="410" fg:w="69"/><text x="5.4445%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (103 samples, 1.30%)</title><rect x="6.0687%" y="213" width="1.3050%" height="15" fill="rgb(210,229,1)" fg:x="479" fg:w="103"/><text x="6.3187%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.06%)</title><rect x="7.3736%" y="213" width="0.0633%" height="15" fill="rgb(222,148,37)" fg:x="582" fg:w="5"/><text x="7.6236%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.10%)</title><rect x="7.4370%" y="213" width="0.1014%" height="15" fill="rgb(234,67,33)" fg:x="587" fg:w="8"/><text x="7.6870%" y="223.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$free (20 samples, 0.25%)</title><rect x="7.5383%" y="213" width="0.2534%" height="15" fill="rgb(247,98,35)" fg:x="595" fg:w="20"/><text x="7.7883%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="9.3501%" y="197" width="0.0760%" height="15" fill="rgb(247,138,52)" fg:x="738" fg:w="6"/><text x="9.6001%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (8 samples, 0.10%)</title><rect x="9.4261%" y="197" width="0.1014%" height="15" fill="rgb(213,79,30)" fg:x="744" fg:w="8"/><text x="9.6761%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::RestoreOnPending::made_progress (4 samples, 0.05%)</title><rect x="9.5274%" y="197" width="0.0507%" height="15" fill="rgb(246,177,23)" fg:x="752" fg:w="4"/><text x="9.7774%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (5 samples, 0.06%)</title><rect x="9.5781%" y="197" width="0.0633%" height="15" fill="rgb(230,62,27)" fg:x="756" fg:w="5"/><text x="9.8281%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.04%)</title><rect x="9.6415%" y="197" width="0.0380%" height="15" fill="rgb(216,154,8)" fg:x="761" fg:w="3"/><text x="9.8915%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (55 samples, 0.70%)</title><rect x="10.1102%" y="181" width="0.6968%" height="15" fill="rgb(244,35,45)" fg:x="798" fg:w="55"/><text x="10.3602%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="10.8070%" y="181" width="0.0380%" height="15" fill="rgb(251,115,12)" fg:x="853" fg:w="3"/><text x="11.0570%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (4 samples, 0.05%)</title><rect x="10.8451%" y="181" width="0.0507%" height="15" fill="rgb(240,54,50)" fg:x="856" fg:w="4"/><text x="11.0951%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::Budget::decrement (4 samples, 0.05%)</title><rect x="10.8957%" y="181" width="0.0507%" height="15" fill="rgb(233,84,52)" fg:x="860" fg:w="4"/><text x="11.1457%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (11 samples, 0.14%)</title><rect x="10.9464%" y="181" width="0.1394%" height="15" fill="rgb(207,117,47)" fg:x="864" fg:w="11"/><text x="11.1964%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (35 samples, 0.44%)</title><rect x="11.0858%" y="181" width="0.4434%" height="15" fill="rgb(249,43,39)" fg:x="875" fg:w="35"/><text x="11.3358%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::block::is_ready (4 samples, 0.05%)</title><rect x="11.5292%" y="181" width="0.0507%" height="15" fill="rgb(209,38,44)" fg:x="910" fg:w="4"/><text x="11.7792%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::block::is_tx_closed (1 samples, 0.01%)</title><rect x="11.5799%" y="181" width="0.0127%" height="15" fill="rgb(236,212,23)" fg:x="914" fg:w="1"/><text x="11.8299%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (56 samples, 0.71%)</title><rect x="11.5926%" y="181" width="0.7095%" height="15" fill="rgb(242,79,21)" fg:x="915" fg:w="56"/><text x="11.8426%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (208 samples, 2.64%)</title><rect x="9.6795%" y="197" width="2.6352%" height="15" fill="rgb(211,96,35)" fg:x="764" fg:w="208"/><text x="9.9295%" y="207.50">ru..</text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.01%)</title><rect x="12.3020%" y="181" width="0.0127%" height="15" fill="rgb(253,215,40)" fg:x="971" fg:w="1"/><text x="12.5520%" y="191.50"></text></g><g><title>rust-nexmark`builtins::stream::Stream&lt;T&gt;::recv::_{{closure}} (389 samples, 4.93%)</title><rect x="7.7917%" y="213" width="4.9284%" height="15" fill="rgb(211,81,21)" fg:x="615" fg:w="389"/><text x="8.0417%" y="223.50">rust-n..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (32 samples, 0.41%)</title><rect x="12.3147%" y="197" width="0.4054%" height="15" fill="rgb(208,190,38)" fg:x="972" fg:w="32"/><text x="12.5647%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (20 samples, 0.25%)</title><rect x="13.2776%" y="197" width="0.2534%" height="15" fill="rgb(235,213,38)" fg:x="1048" fg:w="20"/><text x="13.5276%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (203 samples, 2.57%)</title><rect x="13.5310%" y="197" width="2.5719%" height="15" fill="rgb(237,122,38)" fg:x="1068" fg:w="203"/><text x="13.7810%" y="207.50">li..</text></g><g><title>libsystem_platform.dylib`__bzero (64 samples, 0.81%)</title><rect x="16.1029%" y="197" width="0.8108%" height="15" fill="rgb(244,218,35)" fg:x="1271" fg:w="64"/><text x="16.3529%" y="207.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (421 samples, 5.33%)</title><rect x="12.7201%" y="213" width="5.3338%" height="15" fill="rgb(240,68,47)" fg:x="1004" fg:w="421"/><text x="12.9701%" y="223.50">rust-ne..</text></g><g><title>libsystem_platform.dylib`_platform_memset (90 samples, 1.14%)</title><rect x="16.9137%" y="197" width="1.1403%" height="15" fill="rgb(210,16,53)" fg:x="1335" fg:w="90"/><text x="17.1637%" y="207.50"></text></g><g><title>rust-nexmark`builtins::stream::filter::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::filter::_{{closure}} (1,041 samples, 13.19%)</title><rect x="4.8904%" y="229" width="13.1889%" height="15" fill="rgb(235,124,12)" fg:x="386" fg:w="1041"/><text x="5.1404%" y="239.50">rust-nexmark`builtin..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.03%)</title><rect x="18.0540%" y="213" width="0.0253%" height="15" fill="rgb(224,169,11)" fg:x="1425" fg:w="2"/><text x="18.3040%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (67 samples, 0.85%)</title><rect x="22.3109%" y="197" width="0.8489%" height="15" fill="rgb(250,166,2)" fg:x="1761" fg:w="67"/><text x="22.5609%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="23.1598%" y="197" width="0.1014%" height="15" fill="rgb(242,216,29)" fg:x="1828" fg:w="8"/><text x="23.4098%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (6 samples, 0.08%)</title><rect x="23.2611%" y="197" width="0.0760%" height="15" fill="rgb(230,116,27)" fg:x="1836" fg:w="6"/><text x="23.5111%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="23.3371%" y="197" width="0.0253%" height="15" fill="rgb(228,99,48)" fg:x="1842" fg:w="2"/><text x="23.5871%" y="207.50"></text></g><g><title>rust-nexmark`tokio::macros::support::thread_rng_n (3 samples, 0.04%)</title><rect x="23.3625%" y="197" width="0.0380%" height="15" fill="rgb(253,11,6)" fg:x="1844" fg:w="3"/><text x="23.6125%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::RestoreOnPending::made_progress (6 samples, 0.08%)</title><rect x="23.4005%" y="197" width="0.0760%" height="15" fill="rgb(247,143,39)" fg:x="1847" fg:w="6"/><text x="23.6505%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (8 samples, 0.10%)</title><rect x="23.4765%" y="197" width="0.1014%" height="15" fill="rgb(236,97,10)" fg:x="1853" fg:w="8"/><text x="23.7265%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.05%)</title><rect x="23.5779%" y="197" width="0.0507%" height="15" fill="rgb(233,208,19)" fg:x="1861" fg:w="4"/><text x="23.8279%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (90 samples, 1.14%)</title><rect x="23.9453%" y="181" width="1.1403%" height="15" fill="rgb(216,164,2)" fg:x="1890" fg:w="90"/><text x="24.1953%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="25.0855%" y="181" width="0.0633%" height="15" fill="rgb(220,129,5)" fg:x="1980" fg:w="5"/><text x="25.3355%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (11 samples, 0.14%)</title><rect x="25.1489%" y="181" width="0.1394%" height="15" fill="rgb(242,17,10)" fg:x="1985" fg:w="11"/><text x="25.3989%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::Budget::decrement (4 samples, 0.05%)</title><rect x="25.2882%" y="181" width="0.0507%" height="15" fill="rgb(242,107,0)" fg:x="1996" fg:w="4"/><text x="25.5382%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::coop::poll_proceed (9 samples, 0.11%)</title><rect x="25.3389%" y="181" width="0.1140%" height="15" fill="rgb(251,28,31)" fg:x="2000" fg:w="9"/><text x="25.5889%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="25.4529%" y="181" width="0.0127%" height="15" fill="rgb(233,223,10)" fg:x="2009" fg:w="1"/><text x="25.7029%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (14 samples, 0.18%)</title><rect x="25.9977%" y="165" width="0.1774%" height="15" fill="rgb(215,21,27)" fg:x="2052" fg:w="14"/><text x="26.2477%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.04%)</title><rect x="26.1751%" y="149" width="0.0380%" height="15" fill="rgb(232,23,21)" fg:x="2066" fg:w="3"/><text x="26.4251%" y="159.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (60 samples, 0.76%)</title><rect x="25.4656%" y="181" width="0.7602%" height="15" fill="rgb(244,5,23)" fg:x="2010" fg:w="60"/><text x="25.7156%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (4 samples, 0.05%)</title><rect x="26.1751%" y="165" width="0.0507%" height="15" fill="rgb(226,81,46)" fg:x="2066" fg:w="4"/><text x="26.4251%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="26.2131%" y="149" width="0.0127%" height="15" fill="rgb(247,70,30)" fg:x="2069" fg:w="1"/><text x="26.4631%" y="159.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::block::is_ready (6 samples, 0.08%)</title><rect x="26.2258%" y="181" width="0.0760%" height="15" fill="rgb(212,68,19)" fg:x="2070" fg:w="6"/><text x="26.4758%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (67 samples, 0.85%)</title><rect x="26.3018%" y="181" width="0.8489%" height="15" fill="rgb(240,187,13)" fg:x="2076" fg:w="67"/><text x="26.5518%" y="191.50"></text></g><g><title>rust-nexmark`core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="27.1380%" y="165" width="0.0127%" height="15" fill="rgb(223,113,26)" fg:x="2142" fg:w="1"/><text x="27.3880%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (281 samples, 3.56%)</title><rect x="23.6285%" y="197" width="3.5601%" height="15" fill="rgb(206,192,2)" fg:x="1865" fg:w="281"/><text x="23.8785%" y="207.50">rust..</text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.04%)</title><rect x="27.1506%" y="181" width="0.0380%" height="15" fill="rgb(241,108,4)" fg:x="2143" fg:w="3"/><text x="27.4006%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (109 samples, 1.38%)</title><rect x="27.1886%" y="197" width="1.3810%" height="15" fill="rgb(247,173,49)" fg:x="2146" fg:w="109"/><text x="27.4386%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.01%)</title><rect x="28.5696%" y="197" width="0.0127%" height="15" fill="rgb(224,114,35)" fg:x="2255" fg:w="1"/><text x="28.8196%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (54 samples, 0.68%)</title><rect x="28.6076%" y="181" width="0.6842%" height="15" fill="rgb(245,159,27)" fg:x="2258" fg:w="54"/><text x="28.8576%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::clone_waker (4 samples, 0.05%)</title><rect x="29.4691%" y="149" width="0.0507%" height="15" fill="rgb(245,172,44)" fg:x="2326" fg:w="4"/><text x="29.7191%" y="159.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::drop_waker (6 samples, 0.08%)</title><rect x="29.5198%" y="149" width="0.0760%" height="15" fill="rgb(236,23,11)" fg:x="2330" fg:w="6"/><text x="29.7698%" y="159.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::entry::TimerEntry::poll_elapsed (23 samples, 0.29%)</title><rect x="29.4185%" y="165" width="0.2914%" height="15" fill="rgb(205,117,38)" fg:x="2322" fg:w="23"/><text x="29.6685%" y="175.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (9 samples, 0.11%)</title><rect x="29.5958%" y="149" width="0.1140%" height="15" fill="rgb(237,72,25)" fg:x="2336" fg:w="9"/><text x="29.8458%" y="159.50"></text></g><g><title>rust-nexmark`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (38 samples, 0.48%)</title><rect x="29.2918%" y="181" width="0.4814%" height="15" fill="rgb(244,70,9)" fg:x="2312" fg:w="38"/><text x="29.5418%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (5 samples, 0.06%)</title><rect x="29.7099%" y="165" width="0.0633%" height="15" fill="rgb(217,125,39)" fg:x="2345" fg:w="5"/><text x="29.9599%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (699 samples, 8.86%)</title><rect x="20.9426%" y="213" width="8.8559%" height="15" fill="rgb(235,36,10)" fg:x="1653" fg:w="699"/><text x="21.1926%" y="223.50">rust-nexmark`..</text></g><g><title>rust-nexmark`tokio::time::interval::Interval::poll_tick (96 samples, 1.22%)</title><rect x="28.5823%" y="197" width="1.2163%" height="15" fill="rgb(251,123,47)" fg:x="2256" fg:w="96"/><text x="28.8323%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::time::entry::TimerEntry::poll_elapsed (2 samples, 0.03%)</title><rect x="29.7732%" y="181" width="0.0253%" height="15" fill="rgb(221,13,13)" fg:x="2350" fg:w="2"/><text x="30.0232%" y="191.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (7 samples, 0.09%)</title><rect x="29.7986%" y="213" width="0.0887%" height="15" fill="rgb(238,131,9)" fg:x="2352" fg:w="7"/><text x="30.0486%" y="223.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="29.8872%" y="213" width="0.0380%" height="15" fill="rgb(211,50,8)" fg:x="2359" fg:w="3"/><text x="30.1372%" y="223.50"></text></g><g><title>rust-nexmark`builtins::time::Time::from_milliseconds (9 samples, 0.11%)</title><rect x="29.9253%" y="213" width="0.1140%" height="15" fill="rgb(245,182,24)" fg:x="2362" fg:w="9"/><text x="30.1753%" y="223.50"></text></g><g><title>rust-nexmark`__divti3 (13 samples, 0.16%)</title><rect x="30.3687%" y="181" width="0.1647%" height="15" fill="rgb(242,14,37)" fg:x="2397" fg:w="13"/><text x="30.6187%" y="191.50"></text></g><g><title>rust-nexmark`time::date::Date::from_julian_day_unchecked (16 samples, 0.20%)</title><rect x="30.5334%" y="181" width="0.2027%" height="15" fill="rgb(246,228,12)" fg:x="2410" fg:w="16"/><text x="30.7834%" y="191.50"></text></g><g><title>rust-nexmark`__divti3 (7 samples, 0.09%)</title><rect x="31.0402%" y="165" width="0.0887%" height="15" fill="rgb(213,55,15)" fg:x="2450" fg:w="7"/><text x="31.2902%" y="175.50"></text></g><g><title>rust-nexmark`compiler_builtins::int::specialized_div_rem::u128_div_rem (12 samples, 0.15%)</title><rect x="31.1288%" y="165" width="0.1520%" height="15" fill="rgb(209,9,3)" fg:x="2457" fg:w="12"/><text x="31.3788%" y="175.50"></text></g><g><title>rust-nexmark`time::date::Date::from_julian_day_unchecked (29 samples, 0.37%)</title><rect x="31.2809%" y="165" width="0.3674%" height="15" fill="rgb(230,59,30)" fg:x="2469" fg:w="29"/><text x="31.5309%" y="175.50"></text></g><g><title>rust-nexmark`builtins::time::Time::from_milliseconds (129 samples, 1.63%)</title><rect x="30.1406%" y="197" width="1.6344%" height="15" fill="rgb(209,121,21)" fg:x="2379" fg:w="129"/><text x="30.3906%" y="207.50"></text></g><g><title>rust-nexmark`time::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos (82 samples, 1.04%)</title><rect x="30.7361%" y="181" width="1.0389%" height="15" fill="rgb(220,109,13)" fg:x="2426" fg:w="82"/><text x="30.9861%" y="191.50"></text></g><g><title>rust-nexmark`time_core::util::is_leap_year (10 samples, 0.13%)</title><rect x="31.6483%" y="165" width="0.1267%" height="15" fill="rgb(232,18,1)" fg:x="2498" fg:w="10"/><text x="31.8983%" y="175.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (13 samples, 0.16%)</title><rect x="31.7750%" y="197" width="0.1647%" height="15" fill="rgb(215,41,42)" fg:x="2508" fg:w="13"/><text x="32.0250%" y="207.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (164 samples, 2.08%)</title><rect x="30.0393%" y="213" width="2.0778%" height="15" fill="rgb(224,123,36)" fg:x="2371" fg:w="164"/><text x="30.2893%" y="223.50">r..</text></g><g><title>rust-nexmark`time::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos (14 samples, 0.18%)</title><rect x="31.9397%" y="197" width="0.1774%" height="15" fill="rgb(240,125,3)" fg:x="2521" fg:w="14"/><text x="32.1897%" y="207.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (4 samples, 0.05%)</title><rect x="32.1171%" y="213" width="0.0507%" height="15" fill="rgb(205,98,50)" fg:x="2535" fg:w="4"/><text x="32.3671%" y="223.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;builtins::stream::Event&lt;rust_nexmark::Bid&gt;&gt;::send::{{closure}}&gt; (6 samples, 0.08%)</title><rect x="32.1677%" y="213" width="0.0760%" height="15" fill="rgb(205,185,37)" fg:x="2539" fg:w="6"/><text x="32.4177%" y="223.50"></text></g><g><title>rust-nexmark`time::date::Date::ordinal (12 samples, 0.15%)</title><rect x="32.2438%" y="213" width="0.1520%" height="15" fill="rgb(238,207,15)" fg:x="2545" fg:w="12"/><text x="32.4938%" y="223.50"></text></g><g><title>rust-nexmark`time::date::Date::year (8 samples, 0.10%)</title><rect x="32.3958%" y="213" width="0.1014%" height="15" fill="rgb(213,199,42)" fg:x="2557" fg:w="8"/><text x="32.6458%" y="223.50"></text></g><g><title>rust-nexmark`time::date_time::DateTime&lt;O&gt;::to_offset_raw (115 samples, 1.46%)</title><rect x="32.4971%" y="213" width="1.4570%" height="15" fill="rgb(235,201,11)" fg:x="2565" fg:w="115"/><text x="32.7471%" y="223.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::minutes_past_hour (22 samples, 0.28%)</title><rect x="33.9541%" y="213" width="0.2787%" height="15" fill="rgb(207,46,11)" fg:x="2680" fg:w="22"/><text x="34.2041%" y="223.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::seconds_past_minute (25 samples, 0.32%)</title><rect x="34.2329%" y="213" width="0.3167%" height="15" fill="rgb(241,35,35)" fg:x="2702" fg:w="25"/><text x="34.4829%" y="223.50"></text></g><g><title>rust-nexmark`time::utc_offset::UtcOffset::whole_hours (20 samples, 0.25%)</title><rect x="34.5496%" y="213" width="0.2534%" height="15" fill="rgb(243,32,47)" fg:x="2727" fg:w="20"/><text x="34.7996%" y="223.50"></text></g><g><title>rust-nexmark`tokio::macros::support::thread_rng_n (3 samples, 0.04%)</title><rect x="34.8030%" y="213" width="0.0380%" height="15" fill="rgb(247,202,23)" fg:x="2747" fg:w="3"/><text x="35.0530%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="34.8410%" y="213" width="0.0127%" height="15" fill="rgb(219,102,11)" fg:x="2750" fg:w="1"/><text x="35.0910%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::acquire (22 samples, 0.28%)</title><rect x="34.8537%" y="213" width="0.2787%" height="15" fill="rgb(243,110,44)" fg:x="2751" fg:w="22"/><text x="35.1037%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.44%)</title><rect x="37.0075%" y="197" width="0.4434%" height="15" fill="rgb(222,74,54)" fg:x="2921" fg:w="35"/><text x="37.2575%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (52 samples, 0.66%)</title><rect x="37.4509%" y="197" width="0.6588%" height="15" fill="rgb(216,99,12)" fg:x="2956" fg:w="52"/><text x="37.7009%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (6 samples, 0.08%)</title><rect x="38.1097%" y="197" width="0.0760%" height="15" fill="rgb(226,22,26)" fg:x="3008" fg:w="6"/><text x="38.3597%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (40 samples, 0.51%)</title><rect x="38.1857%" y="197" width="0.5068%" height="15" fill="rgb(217,163,10)" fg:x="3014" fg:w="40"/><text x="38.4357%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="38.6925%" y="197" width="0.0253%" height="15" fill="rgb(213,25,53)" fg:x="3054" fg:w="2"/><text x="38.9425%" y="207.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memmove (4 samples, 0.05%)</title><rect x="38.7179%" y="197" width="0.0507%" height="15" fill="rgb(252,105,26)" fg:x="3056" fg:w="4"/><text x="38.9679%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (20 samples, 0.25%)</title><rect x="38.7685%" y="197" width="0.2534%" height="15" fill="rgb(220,39,43)" fg:x="3060" fg:w="20"/><text x="39.0185%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.05%)</title><rect x="39.0599%" y="181" width="0.0507%" height="15" fill="rgb(229,68,48)" fg:x="3083" fg:w="4"/><text x="39.3099%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (2 samples, 0.03%)</title><rect x="39.1106%" y="181" width="0.0253%" height="15" fill="rgb(252,8,32)" fg:x="3087" fg:w="2"/><text x="39.3606%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (10 samples, 0.13%)</title><rect x="39.0219%" y="197" width="0.1267%" height="15" fill="rgb(223,20,43)" fg:x="3080" fg:w="10"/><text x="39.2719%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="39.1359%" y="181" width="0.0127%" height="15" fill="rgb(229,81,49)" fg:x="3089" fg:w="1"/><text x="39.3859%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (349 samples, 4.42%)</title><rect x="35.1324%" y="213" width="4.4216%" height="15" fill="rgb(236,28,36)" fg:x="2773" fg:w="349"/><text x="35.3824%" y="223.50">rust-..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (32 samples, 0.41%)</title><rect x="39.1486%" y="197" width="0.4054%" height="15" fill="rgb(249,185,26)" fg:x="3090" fg:w="32"/><text x="39.3986%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (12 samples, 0.15%)</title><rect x="39.5540%" y="213" width="0.1520%" height="15" fill="rgb(249,174,33)" fg:x="3122" fg:w="12"/><text x="39.8040%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (21 samples, 0.27%)</title><rect x="39.7061%" y="213" width="0.2661%" height="15" fill="rgb(233,201,37)" fg:x="3134" fg:w="21"/><text x="39.9561%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::wake (32 samples, 0.41%)</title><rect x="39.9721%" y="213" width="0.4054%" height="15" fill="rgb(221,78,26)" fg:x="3155" fg:w="32"/><text x="40.2221%" y="223.50"></text></g><g><title>rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_source_event_time::_{{closure}} (1,767 samples, 22.39%)</title><rect x="18.0793%" y="229" width="22.3869%" height="15" fill="rgb(250,127,30)" fg:x="1427" fg:w="1767"/><text x="18.3293%" y="239.50">rust-nexmark`builtins::stream::sour..</text></g><g><title>rust-nexmark`tokio::time::interval::Interval::poll_tick (7 samples, 0.09%)</title><rect x="40.3775%" y="213" width="0.0887%" height="15" fill="rgb(230,49,44)" fg:x="3187" fg:w="7"/><text x="40.6275%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.75%)</title><rect x="41.3024%" y="213" width="0.7475%" height="15" fill="rgb(229,67,23)" fg:x="3260" fg:w="59"/><text x="41.5524%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (73 samples, 0.92%)</title><rect x="43.0761%" y="197" width="0.9249%" height="15" fill="rgb(249,83,47)" fg:x="3400" fg:w="73"/><text x="43.3261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (114 samples, 1.44%)</title><rect x="44.0010%" y="197" width="1.4443%" height="15" fill="rgb(215,43,3)" fg:x="3473" fg:w="114"/><text x="44.2510%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (148 samples, 1.88%)</title><rect x="45.4453%" y="197" width="1.8751%" height="15" fill="rgb(238,154,13)" fg:x="3587" fg:w="148"/><text x="45.6953%" y="207.50">l..</text></g><g><title>rust-nexmark`&lt;builtins::string::String as core::convert::From&lt;alloc::string::String&gt;&gt;::from (1 samples, 0.01%)</title><rect x="47.3204%" y="197" width="0.0127%" height="15" fill="rgb(219,56,2)" fg:x="3735" fg:w="1"/><text x="47.5704%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (69 samples, 0.87%)</title><rect x="48.0046%" y="181" width="0.8742%" height="15" fill="rgb(233,0,4)" fg:x="3789" fg:w="69"/><text x="48.2546%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (100 samples, 1.27%)</title><rect x="48.8788%" y="181" width="1.2669%" height="15" fill="rgb(235,30,7)" fg:x="3858" fg:w="100"/><text x="49.1288%" y="191.50"></text></g><g><title>rust-nexmark`&lt;builtins::string::String as core::convert::From&lt;alloc::string::String&gt;&gt;::from (31 samples, 0.39%)</title><rect x="50.1457%" y="181" width="0.3928%" height="15" fill="rgb(250,79,13)" fg:x="3958" fg:w="31"/><text x="50.3957%" y="191.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$malloc (17 samples, 0.22%)</title><rect x="50.5385%" y="181" width="0.2154%" height="15" fill="rgb(211,146,34)" fg:x="3989" fg:w="17"/><text x="50.7885%" y="191.50"></text></g><g><title>rust-nexmark`__rdl_alloc (15 samples, 0.19%)</title><rect x="50.7538%" y="181" width="0.1900%" height="15" fill="rgb(228,22,38)" fg:x="4006" fg:w="15"/><text x="51.0038%" y="191.50"></text></g><g><title>rust-nexmark`&lt;builtins::string::String as serde::de::Deserialize&gt;::deserialize (319 samples, 4.04%)</title><rect x="47.3331%" y="197" width="4.0416%" height="15" fill="rgb(235,168,5)" fg:x="3736" fg:w="319"/><text x="47.5831%" y="207.50">rust..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (34 samples, 0.43%)</title><rect x="50.9439%" y="181" width="0.4308%" height="15" fill="rgb(221,155,16)" fg:x="4021" fg:w="34"/><text x="51.1939%" y="191.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$malloc (10 samples, 0.13%)</title><rect x="51.3746%" y="197" width="0.1267%" height="15" fill="rgb(215,215,53)" fg:x="4055" fg:w="10"/><text x="51.6246%" y="207.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memcpy (9 samples, 0.11%)</title><rect x="51.5013%" y="197" width="0.1140%" height="15" fill="rgb(223,4,10)" fg:x="4065" fg:w="9"/><text x="51.7513%" y="207.50"></text></g><g><title>rust-nexmark`__rdl_alloc (7 samples, 0.09%)</title><rect x="51.6154%" y="197" width="0.0887%" height="15" fill="rgb(234,103,6)" fg:x="4074" fg:w="7"/><text x="51.8654%" y="207.50"></text></g><g><title>rust-nexmark`atoi::atoi (24 samples, 0.30%)</title><rect x="51.7040%" y="197" width="0.3041%" height="15" fill="rgb(227,97,0)" fg:x="4081" fg:w="24"/><text x="51.9540%" y="207.50"></text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_record (16 samples, 0.20%)</title><rect x="52.0081%" y="197" width="0.2027%" height="15" fill="rgb(234,150,53)" fg:x="4105" fg:w="16"/><text x="52.2581%" y="207.50"></text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (1 samples, 0.01%)</title><rect x="52.2108%" y="197" width="0.0127%" height="15" fill="rgb(228,201,54)" fg:x="4121" fg:w="1"/><text x="52.4608%" y="207.50"></text></g><g><title>rust-nexmark`atoi::Sign::try_from (25 samples, 0.32%)</title><rect x="52.9076%" y="181" width="0.3167%" height="15" fill="rgb(222,22,37)" fg:x="4176" fg:w="25"/><text x="53.1576%" y="191.50"></text></g><g><title>rust-nexmark`atoi::atoi (331 samples, 4.19%)</title><rect x="53.2244%" y="181" width="4.1936%" height="15" fill="rgb(237,53,32)" fg:x="4201" fg:w="331"/><text x="53.4744%" y="191.50">rust-..</text></g><g><title>rust-nexmark`csv_core::reader::Reader::read_record (1,259 samples, 15.95%)</title><rect x="57.4180%" y="181" width="15.9508%" height="15" fill="rgb(233,25,53)" fg:x="4532" fg:w="1259"/><text x="57.6680%" y="191.50">rust-nexmark`csv_core::re..</text></g><g><title>rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_struct (2,509 samples, 31.79%)</title><rect x="42.0499%" y="213" width="31.7877%" height="15" fill="rgb(210,40,34)" fg:x="3319" fg:w="2509"/><text x="42.2999%" y="223.50">rust-nexmark`&lt;&amp;mut formats::csv::de::Deserializer&lt;_..</text></g><g><title>rust-nexmark`serde::de::SeqAccess::next_element (1,706 samples, 21.61%)</title><rect x="52.2235%" y="197" width="21.6141%" height="15" fill="rgb(241,220,44)" fg:x="4122" fg:w="1706"/><text x="52.4735%" y="207.50">rust-nexmark`serde::de::SeqAccess:..</text></g><g><title>rust-nexmark`formats::csv::de::Deserializer&lt;_&gt;::read_bytes (37 samples, 0.47%)</title><rect x="73.3688%" y="181" width="0.4688%" height="15" fill="rgb(235,28,35)" fg:x="5791" fg:w="37"/><text x="73.6188%" y="191.50"></text></g><g><title>rust-nexmark`&lt;builtins::string::String as serde::de::Deserialize&gt;::deserialize (265 samples, 3.36%)</title><rect x="73.8376%" y="213" width="3.3574%" height="15" fill="rgb(210,56,17)" fg:x="5828" fg:w="265"/><text x="74.0876%" y="223.50">rus..</text></g><g><title>rust-nexmark`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (9 samples, 0.11%)</title><rect x="77.1950%" y="213" width="0.1140%" height="15" fill="rgb(224,130,29)" fg:x="6093" fg:w="9"/><text x="77.4450%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (171 samples, 2.17%)</title><rect x="77.9678%" y="197" width="2.1665%" height="15" fill="rgb(235,212,8)" fg:x="6154" fg:w="171"/><text x="78.2178%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="80.2483%" y="181" width="0.0127%" height="15" fill="rgb(223,33,50)" fg:x="6334" fg:w="1"/><text x="80.4983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="80.2610%" y="181" width="0.0127%" height="15" fill="rgb(219,149,13)" fg:x="6335" fg:w="1"/><text x="80.5110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_try_free_default (3 samples, 0.04%)</title><rect x="80.2737%" y="181" width="0.0380%" height="15" fill="rgb(250,156,29)" fg:x="6336" fg:w="3"/><text x="80.5237%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (51 samples, 0.65%)</title><rect x="80.3117%" y="181" width="0.6461%" height="15" fill="rgb(216,193,19)" fg:x="6339" fg:w="51"/><text x="80.5617%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="80.9705%" y="165" width="0.0127%" height="15" fill="rgb(216,135,14)" fg:x="6391" fg:w="1"/><text x="81.2205%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.01%)</title><rect x="80.9831%" y="165" width="0.0127%" height="15" fill="rgb(241,47,5)" fg:x="6392" fg:w="1"/><text x="81.2331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="80.9958%" y="165" width="0.0127%" height="15" fill="rgb(233,42,35)" fg:x="6393" fg:w="1"/><text x="81.2458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.06%)</title><rect x="81.0085%" y="165" width="0.0633%" height="15" fill="rgb(231,13,6)" fg:x="6394" fg:w="5"/><text x="81.2585%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.04%)</title><rect x="81.0338%" y="149" width="0.0380%" height="15" fill="rgb(207,181,40)" fg:x="6396" fg:w="3"/><text x="81.2838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="81.0465%" y="133" width="0.0253%" height="15" fill="rgb(254,173,49)" fg:x="6397" fg:w="2"/><text x="81.2965%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="81.0718%" y="165" width="0.0127%" height="15" fill="rgb(221,1,38)" fg:x="6399" fg:w="1"/><text x="81.3218%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (2 samples, 0.03%)</title><rect x="81.0972%" y="149" width="0.0253%" height="15" fill="rgb(206,124,46)" fg:x="6401" fg:w="2"/><text x="81.3472%" y="159.50"></text></g><g><title>rust-nexmark`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.05%)</title><rect x="81.0845%" y="165" width="0.0507%" height="15" fill="rgb(249,21,11)" fg:x="6400" fg:w="4"/><text x="81.3345%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::can_read_output (1 samples, 0.01%)</title><rect x="81.1225%" y="149" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="6403" fg:w="1"/><text x="81.3725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="81.1479%" y="69" width="0.0127%" height="15" fill="rgb(235,61,29)" fg:x="6405" fg:w="1"/><text x="81.3979%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="81.1479%" y="53" width="0.0127%" height="15" fill="rgb(219,207,3)" fg:x="6405" fg:w="1"/><text x="81.3979%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="81.1479%" y="37" width="0.0127%" height="15" fill="rgb(222,56,46)" fg:x="6405" fg:w="1"/><text x="81.3979%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="81.1605%" y="69" width="0.0127%" height="15" fill="rgb(239,76,54)" fg:x="6406" fg:w="1"/><text x="81.4105%" y="79.50"></text></g><g><title>rust-nexmark`__rdl_alloc (4 samples, 0.05%)</title><rect x="81.1352%" y="133" width="0.0507%" height="15" fill="rgb(231,124,27)" fg:x="6404" fg:w="4"/><text x="81.3852%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (3 samples, 0.04%)</title><rect x="81.1479%" y="117" width="0.0380%" height="15" fill="rgb(249,195,6)" fg:x="6405" fg:w="3"/><text x="81.3979%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (3 samples, 0.04%)</title><rect x="81.1479%" y="101" width="0.0380%" height="15" fill="rgb(237,174,47)" fg:x="6405" fg:w="3"/><text x="81.3979%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (3 samples, 0.04%)</title><rect x="81.1479%" y="85" width="0.0380%" height="15" fill="rgb(206,201,31)" fg:x="6405" fg:w="3"/><text x="81.3979%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="81.1732%" y="69" width="0.0127%" height="15" fill="rgb(231,57,52)" fg:x="6407" fg:w="1"/><text x="81.4232%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="81.1732%" y="53" width="0.0127%" height="15" fill="rgb(248,177,22)" fg:x="6407" fg:w="1"/><text x="81.4232%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (56 samples, 0.71%)</title><rect x="81.2239%" y="101" width="0.7095%" height="15" fill="rgb(215,211,37)" fg:x="6411" fg:w="56"/><text x="81.4739%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (1 samples, 0.01%)</title><rect x="81.9334%" y="101" width="0.0127%" height="15" fill="rgb(241,128,51)" fg:x="6467" fg:w="1"/><text x="82.1834%" y="111.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::spawn_blocking (66 samples, 0.84%)</title><rect x="81.1352%" y="165" width="0.8362%" height="15" fill="rgb(227,165,31)" fg:x="6404" fg:w="66"/><text x="81.3852%" y="175.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Spawner::spawn_blocking (66 samples, 0.84%)</title><rect x="81.1352%" y="149" width="0.8362%" height="15" fill="rgb(228,167,24)" fg:x="6404" fg:w="66"/><text x="81.3852%" y="159.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Spawner::spawn_task (62 samples, 0.79%)</title><rect x="81.1859%" y="133" width="0.7855%" height="15" fill="rgb(228,143,12)" fg:x="6408" fg:w="62"/><text x="81.4359%" y="143.50"></text></g><g><title>rust-nexmark`parking_lot::raw_mutex::RawMutex::unlock_slow (62 samples, 0.79%)</title><rect x="81.1859%" y="117" width="0.7855%" height="15" fill="rgb(249,149,8)" fg:x="6408" fg:w="62"/><text x="81.4359%" y="127.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="81.9460%" y="101" width="0.0253%" height="15" fill="rgb(243,35,44)" fg:x="6468" fg:w="2"/><text x="82.1960%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.03%)</title><rect x="81.9460%" y="85" width="0.0253%" height="15" fill="rgb(246,89,9)" fg:x="6468" fg:w="2"/><text x="82.1960%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.03%)</title><rect x="81.9460%" y="69" width="0.0253%" height="15" fill="rgb(233,213,13)" fg:x="6468" fg:w="2"/><text x="82.1960%" y="79.50"></text></g><g><title>rust-nexmark`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (82 samples, 1.04%)</title><rect x="80.9578%" y="181" width="1.0389%" height="15" fill="rgb(233,141,41)" fg:x="6390" fg:w="82"/><text x="81.2078%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (2 samples, 0.03%)</title><rect x="81.9714%" y="165" width="0.0253%" height="15" fill="rgb(239,167,4)" fg:x="6470" fg:w="2"/><text x="82.2214%" y="175.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (148 samples, 1.88%)</title><rect x="80.1343%" y="197" width="1.8751%" height="15" fill="rgb(209,217,16)" fg:x="6325" fg:w="148"/><text x="80.3843%" y="207.50">r..</text></g><g><title>rust-nexmark`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="81.9967%" y="181" width="0.0127%" height="15" fill="rgb(219,88,35)" fg:x="6472" fg:w="1"/><text x="82.2467%" y="191.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memchr (3 samples, 0.04%)</title><rect x="82.0094%" y="197" width="0.0380%" height="15" fill="rgb(220,193,23)" fg:x="6473" fg:w="3"/><text x="82.2594%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (377 samples, 4.78%)</title><rect x="77.3090%" y="213" width="4.7764%" height="15" fill="rgb(230,90,52)" fg:x="6102" fg:w="377"/><text x="77.5590%" y="223.50">rust-n..</text></g><g><title>rust-nexmark`tokio::io::read_buf::slice_to_uninit_mut (3 samples, 0.04%)</title><rect x="82.0474%" y="197" width="0.0380%" height="15" fill="rgb(252,106,19)" fg:x="6476" fg:w="3"/><text x="82.2974%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="82.0854%" y="213" width="0.0127%" height="15" fill="rgb(206,74,20)" fg:x="6479" fg:w="1"/><text x="82.3354%" y="223.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memcpy (5 samples, 0.06%)</title><rect x="82.0981%" y="213" width="0.0633%" height="15" fill="rgb(230,138,44)" fg:x="6480" fg:w="5"/><text x="82.3481%" y="223.50"></text></g><g><title>rust-nexmark`serde::de::SeqAccess::next_element (13 samples, 0.16%)</title><rect x="82.1614%" y="213" width="0.1647%" height="15" fill="rgb(235,182,43)" fg:x="6485" fg:w="13"/><text x="82.4114%" y="223.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="82.3261%" y="213" width="0.0127%" height="15" fill="rgb(242,16,51)" fg:x="6498" fg:w="1"/><text x="82.5761%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::batch_semaphore::Semaphore::acquire (13 samples, 0.16%)</title><rect x="82.3388%" y="213" width="0.1647%" height="15" fill="rgb(248,9,4)" fg:x="6499" fg:w="13"/><text x="82.5888%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (47 samples, 0.60%)</title><rect x="84.3786%" y="197" width="0.5955%" height="15" fill="rgb(210,31,22)" fg:x="6660" fg:w="47"/><text x="84.6286%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.16%)</title><rect x="84.9740%" y="197" width="0.1647%" height="15" fill="rgb(239,54,39)" fg:x="6707" fg:w="13"/><text x="85.2240%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (8 samples, 0.10%)</title><rect x="85.1387%" y="197" width="0.1014%" height="15" fill="rgb(230,99,41)" fg:x="6720" fg:w="8"/><text x="85.3887%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (42 samples, 0.53%)</title><rect x="85.2401%" y="197" width="0.5321%" height="15" fill="rgb(253,106,12)" fg:x="6728" fg:w="42"/><text x="85.4901%" y="207.50"></text></g><g><title>rust-nexmark`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="85.7722%" y="197" width="0.0253%" height="15" fill="rgb(213,46,41)" fg:x="6770" fg:w="2"/><text x="86.0222%" y="207.50"></text></g><g><title>rust-nexmark`DYLD-STUB$$memmove (3 samples, 0.04%)</title><rect x="85.7975%" y="197" width="0.0380%" height="15" fill="rgb(215,133,35)" fg:x="6772" fg:w="3"/><text x="86.0475%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (29 samples, 0.37%)</title><rect x="85.8356%" y="197" width="0.3674%" height="15" fill="rgb(213,28,5)" fg:x="6775" fg:w="29"/><text x="86.0856%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::raw::schedule (2 samples, 0.03%)</title><rect x="86.2030%" y="197" width="0.0253%" height="15" fill="rgb(215,77,49)" fg:x="6804" fg:w="2"/><text x="86.4530%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="86.2283%" y="197" width="0.0127%" height="15" fill="rgb(248,100,22)" fg:x="6806" fg:w="1"/><text x="86.4783%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.06%)</title><rect x="86.2663%" y="181" width="0.0633%" height="15" fill="rgb(208,67,9)" fg:x="6809" fg:w="5"/><text x="86.5163%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::with_scheduler (2 samples, 0.03%)</title><rect x="86.3297%" y="181" width="0.0253%" height="15" fill="rgb(219,133,21)" fg:x="6814" fg:w="2"/><text x="86.5797%" y="191.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_val (11 samples, 0.14%)</title><rect x="86.2410%" y="197" width="0.1394%" height="15" fill="rgb(246,46,29)" fg:x="6807" fg:w="11"/><text x="86.4910%" y="207.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.03%)</title><rect x="86.3550%" y="181" width="0.0253%" height="15" fill="rgb(246,185,52)" fg:x="6816" fg:w="2"/><text x="86.6050%" y="191.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (338 samples, 4.28%)</title><rect x="82.5035%" y="213" width="4.2823%" height="15" fill="rgb(252,136,11)" fg:x="6512" fg:w="338"/><text x="82.7535%" y="223.50">rust-..</text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (32 samples, 0.41%)</title><rect x="86.3803%" y="197" width="0.4054%" height="15" fill="rgb(219,138,53)" fg:x="6818" fg:w="32"/><text x="86.6303%" y="207.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (26 samples, 0.33%)</title><rect x="86.7858%" y="213" width="0.3294%" height="15" fill="rgb(211,51,23)" fg:x="6850" fg:w="26"/><text x="87.0358%" y="223.50"></text></g><g><title>rust-nexmark`tokio::sync::task::atomic_waker::AtomicWaker::wake (18 samples, 0.23%)</title><rect x="87.1152%" y="213" width="0.2281%" height="15" fill="rgb(247,221,28)" fg:x="6876" fg:w="18"/><text x="87.3652%" y="223.50"></text></g><g><title>rust-nexmark`tokio::trace::async_trace_leaf (1 samples, 0.01%)</title><rect x="87.3432%" y="213" width="0.0127%" height="15" fill="rgb(251,222,45)" fg:x="6894" fg:w="1"/><text x="87.5932%" y="223.50"></text></g><g><title>rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_source_reader::_{{closure}} (3,709 samples, 46.99%)</title><rect x="40.4662%" y="229" width="46.9910%" height="15" fill="rgb(217,162,53)" fg:x="3194" fg:w="3709"/><text x="40.7162%" y="239.50">rust-nexmark`builtins::stream::source::_&lt;impl builtins::stream::Stream&lt;T&gt;&gt;::_..</text></g><g><title>rust-nexmark`tokio::util::memchr::memchr (8 samples, 0.10%)</title><rect x="87.3559%" y="213" width="0.1014%" height="15" fill="rgb(229,93,14)" fg:x="6895" fg:w="8"/><text x="87.6059%" y="223.50"></text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once (3 samples, 0.04%)</title><rect x="87.4572%" y="229" width="0.0380%" height="15" fill="rgb(209,67,49)" fg:x="6903" fg:w="3"/><text x="87.7072%" y="239.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;rust_nexmark::Bid&gt; (2 samples, 0.03%)</title><rect x="87.4952%" y="229" width="0.0253%" height="15" fill="rgb(213,87,29)" fg:x="6906" fg:w="2"/><text x="87.7452%" y="239.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;builtins::stream::Event&lt;rust_nexmark::Bid&gt;&gt;::send::{{closure}}&gt; (10 samples, 0.13%)</title><rect x="87.5206%" y="229" width="0.1267%" height="15" fill="rgb(205,151,52)" fg:x="6908" fg:w="10"/><text x="87.7706%" y="239.50"></text></g><g><title>rust-nexmark`time::date_time::DateTime&lt;O&gt;::to_offset_raw (38 samples, 0.48%)</title><rect x="87.6473%" y="229" width="0.4814%" height="15" fill="rgb(253,215,39)" fg:x="6918" fg:w="38"/><text x="87.8973%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.04%)</title><rect x="88.1287%" y="229" width="0.0380%" height="15" fill="rgb(221,220,41)" fg:x="6956" fg:w="3"/><text x="88.3787%" y="239.50"></text></g><g><title>rust-nexmark`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (19 samples, 0.24%)</title><rect x="88.1667%" y="229" width="0.2407%" height="15" fill="rgb(218,133,21)" fg:x="6959" fg:w="19"/><text x="88.4167%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,732 samples, 85.29%)</title><rect x="3.1674%" y="245" width="85.2908%" height="15" fill="rgb(221,193,43)" fg:x="250" fg:w="6732"/><text x="3.4174%" y="255.50">rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>rust-nexmark`tokio::time::interval::Interval::tick (4 samples, 0.05%)</title><rect x="88.4074%" y="229" width="0.0507%" height="15" fill="rgb(240,128,52)" fg:x="6978" fg:w="4"/><text x="88.6574%" y="239.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::TaskIdGuard::enter (4 samples, 0.05%)</title><rect x="88.4581%" y="245" width="0.0507%" height="15" fill="rgb(253,114,12)" fg:x="6982" fg:w="4"/><text x="88.7081%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::state::State::transition_to_idle (9 samples, 0.11%)</title><rect x="88.5088%" y="245" width="0.1140%" height="15" fill="rgb(215,223,47)" fg:x="6986" fg:w="9"/><text x="88.7588%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,769 samples, 85.76%)</title><rect x="2.8760%" y="261" width="85.7595%" height="15" fill="rgb(248,225,23)" fg:x="227" fg:w="6769"/><text x="3.1260%" y="271.50">rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>rust-nexmark`tokio::runtime::task::state::State::transition_to_running (1 samples, 0.01%)</title><rect x="88.6228%" y="245" width="0.0127%" height="15" fill="rgb(250,108,0)" fg:x="6995" fg:w="1"/><text x="88.8728%" y="255.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner::transition_result_to_poll_future (3 samples, 0.04%)</title><rect x="88.6355%" y="261" width="0.0380%" height="15" fill="rgb(228,208,7)" fg:x="6996" fg:w="3"/><text x="88.8855%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::run_task (6,806 samples, 86.23%)</title><rect x="2.4579%" y="277" width="86.2283%" height="15" fill="rgb(244,45,10)" fg:x="194" fg:w="6806"/><text x="2.7079%" y="287.50">rust-nexmark`tokio::runtime::scheduler::current_thread::Context::run_task</text></g><g><title>rust-nexmark`tokio::runtime::task::waker::raw_waker (1 samples, 0.01%)</title><rect x="88.6735%" y="261" width="0.0127%" height="15" fill="rgb(207,125,25)" fg:x="6999" fg:w="1"/><text x="88.9235%" y="271.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.01%)</title><rect x="88.6862%" y="277" width="0.0127%" height="15" fill="rgb(210,195,18)" fg:x="7000" fg:w="1"/><text x="88.9362%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 0.15%)</title><rect x="88.6988%" y="277" width="0.1520%" height="15" fill="rgb(249,80,12)" fg:x="7001" fg:w="12"/><text x="88.9488%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::raw::RawTask::poll (1 samples, 0.01%)</title><rect x="88.8509%" y="277" width="0.0127%" height="15" fill="rgb(221,65,9)" fg:x="7013" fg:w="1"/><text x="89.1009%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (7,013 samples, 88.85%)</title><rect x="0.0380%" y="293" width="88.8509%" height="15" fill="rgb(235,49,36)" fg:x="3" fg:w="7013"/><text x="0.2880%" y="303.50">rust-nexmark`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>rust-nexmark`tokio::runtime::task::raw::poll (2 samples, 0.03%)</title><rect x="88.8635%" y="277" width="0.0253%" height="15" fill="rgb(225,32,20)" fg:x="7014" fg:w="2"/><text x="89.1135%" y="287.50"></text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Context::run_task (2 samples, 0.03%)</title><rect x="88.8889%" y="293" width="0.0253%" height="15" fill="rgb(215,141,46)" fg:x="7016" fg:w="2"/><text x="89.1389%" y="303.50"></text></g><g><title>dyld`start (7,019 samples, 88.93%)</title><rect x="0.0000%" y="485" width="88.9269%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="7019"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>rust-nexmark`main (7,019 samples, 88.93%)</title><rect x="0.0000%" y="469" width="88.9269%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="7019"/><text x="0.2500%" y="479.50">rust-nexmark`main</text></g><g><title>rust-nexmark`std::rt::lang_start_internal (7,018 samples, 88.91%)</title><rect x="0.0127%" y="453" width="88.9142%" height="15" fill="rgb(234,217,39)" fg:x="1" fg:w="7018"/><text x="0.2627%" y="463.50">rust-nexmark`std::rt::lang_start_internal</text></g><g><title>rust-nexmark`std::rt::lang_start::_{{closure}} (7,018 samples, 88.91%)</title><rect x="0.0127%" y="437" width="88.9142%" height="15" fill="rgb(207,178,40)" fg:x="1" fg:w="7018"/><text x="0.2627%" y="447.50">rust-nexmark`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace (7,018 samples, 88.91%)</title><rect x="0.0127%" y="421" width="88.9142%" height="15" fill="rgb(221,136,13)" fg:x="1" fg:w="7018"/><text x="0.2627%" y="431.50">rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-nexmark`rust_nexmark::main (7,018 samples, 88.91%)</title><rect x="0.0127%" y="405" width="88.9142%" height="15" fill="rgb(249,199,10)" fg:x="1" fg:w="7018"/><text x="0.2627%" y="415.50">rust-nexmark`rust_nexmark::main</text></g><g><title>rust-nexmark`runner::data_parallel::DataParallelRunner::spawn_current_thread (7,018 samples, 88.91%)</title><rect x="0.0127%" y="389" width="88.9142%" height="15" fill="rgb(249,222,13)" fg:x="1" fg:w="7018"/><text x="0.2627%" y="399.50">rust-nexmark`runner::data_parallel::DataParallelRunner::spawn_current_thread</text></g><g><title>rust-nexmark`tokio::runtime::runtime::Runtime::block_on (7,016 samples, 88.89%)</title><rect x="0.0380%" y="373" width="88.8889%" height="15" fill="rgb(244,185,38)" fg:x="3" fg:w="7016"/><text x="0.2880%" y="383.50">rust-nexmark`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::CurrentThread::block_on (7,016 samples, 88.89%)</title><rect x="0.0380%" y="357" width="88.8889%" height="15" fill="rgb(236,202,9)" fg:x="3" fg:w="7016"/><text x="0.2880%" y="367.50">rust-nexmark`tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>rust-nexmark`tokio::runtime::context::runtime::enter_runtime (7,016 samples, 88.89%)</title><rect x="0.0380%" y="341" width="88.8889%" height="15" fill="rgb(250,229,37)" fg:x="3" fg:w="7016"/><text x="0.2880%" y="351.50">rust-nexmark`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::CoreGuard::block_on (7,016 samples, 88.89%)</title><rect x="0.0380%" y="325" width="88.8889%" height="15" fill="rgb(206,174,23)" fg:x="3" fg:w="7016"/><text x="0.2880%" y="335.50">rust-nexmark`tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>rust-nexmark`tokio::runtime::context::set_scheduler (7,016 samples, 88.89%)</title><rect x="0.0380%" y="309" width="88.8889%" height="15" fill="rgb(211,33,43)" fg:x="3" fg:w="7016"/><text x="0.2880%" y="319.50">rust-nexmark`tokio::runtime::context::set_scheduler</text></g><g><title>rust-nexmark`tokio::runtime::scheduler::current_thread::Core::tick (1 samples, 0.01%)</title><rect x="88.9142%" y="293" width="0.0127%" height="15" fill="rgb(245,58,50)" fg:x="7018" fg:w="1"/><text x="89.1642%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.04%)</title><rect x="88.9269%" y="389" width="0.0380%" height="15" fill="rgb(244,68,36)" fg:x="7019" fg:w="3"/><text x="89.1769%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="88.9649%" y="389" width="0.0127%" height="15" fill="rgb(232,229,15)" fg:x="7022" fg:w="1"/><text x="89.2149%" y="399.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (3 samples, 0.04%)</title><rect x="89.0029%" y="373" width="0.0380%" height="15" fill="rgb(254,30,23)" fg:x="7025" fg:w="3"/><text x="89.2529%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.04%)</title><rect x="89.0029%" y="357" width="0.0380%" height="15" fill="rgb(235,160,14)" fg:x="7025" fg:w="3"/><text x="89.2529%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__gettimeofday (40 samples, 0.51%)</title><rect x="89.0409%" y="373" width="0.5068%" height="15" fill="rgb(212,155,44)" fg:x="7028" fg:w="40"/><text x="89.2909%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (227 samples, 2.88%)</title><rect x="89.5477%" y="373" width="2.8760%" height="15" fill="rgb(226,2,50)" fg:x="7068" fg:w="227"/><text x="89.7977%" y="383.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.05%)</title><rect x="92.4237%" y="373" width="0.0507%" height="15" fill="rgb(234,177,6)" fg:x="7295" fg:w="4"/><text x="92.6737%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.01%)</title><rect x="92.4617%" y="357" width="0.0127%" height="15" fill="rgb(217,24,9)" fg:x="7298" fg:w="1"/><text x="92.7117%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="92.4743%" y="373" width="0.0127%" height="15" fill="rgb(220,13,46)" fg:x="7299" fg:w="1"/><text x="92.7243%" y="383.50"></text></g><g><title>rust-nexmark`parking_lot::condvar::Condvar::wait_until_internal (285 samples, 3.61%)</title><rect x="88.9776%" y="389" width="3.6108%" height="15" fill="rgb(239,221,27)" fg:x="7023" fg:w="285"/><text x="89.2276%" y="399.50">rust..</text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (8 samples, 0.10%)</title><rect x="92.4870%" y="373" width="0.1014%" height="15" fill="rgb(222,198,25)" fg:x="7300" fg:w="8"/><text x="92.7370%" y="383.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (8 samples, 0.10%)</title><rect x="92.4870%" y="357" width="0.1014%" height="15" fill="rgb(211,99,13)" fg:x="7300" fg:w="8"/><text x="92.7370%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.10%)</title><rect x="92.4870%" y="341" width="0.1014%" height="15" fill="rgb(232,111,31)" fg:x="7300" fg:w="8"/><text x="92.7370%" y="351.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (2 samples, 0.03%)</title><rect x="92.5884%" y="357" width="0.0253%" height="15" fill="rgb(245,82,37)" fg:x="7308" fg:w="2"/><text x="92.8384%" y="367.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (1 samples, 0.01%)</title><rect x="92.6137%" y="357" width="0.0127%" height="15" fill="rgb(227,149,46)" fg:x="7310" fg:w="1"/><text x="92.8637%" y="367.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.14%)</title><rect x="92.5884%" y="373" width="0.1394%" height="15" fill="rgb(218,36,50)" fg:x="7308" fg:w="11"/><text x="92.8384%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.10%)</title><rect x="92.6264%" y="357" width="0.1014%" height="15" fill="rgb(226,80,48)" fg:x="7311" fg:w="8"/><text x="92.8764%" y="367.50"></text></g><g><title>rust-nexmark`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (13 samples, 0.16%)</title><rect x="92.5884%" y="389" width="0.1647%" height="15" fill="rgb(238,224,15)" fg:x="7308" fg:w="13"/><text x="92.8384%" y="399.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="92.7277%" y="373" width="0.0253%" height="15" fill="rgb(241,136,10)" fg:x="7319" fg:w="2"/><text x="92.9777%" y="383.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="92.7531%" y="389" width="0.0127%" height="15" fill="rgb(208,32,45)" fg:x="7321" fg:w="1"/><text x="93.0031%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.05%)</title><rect x="92.7657%" y="373" width="0.0507%" height="15" fill="rgb(207,135,9)" fg:x="7322" fg:w="4"/><text x="93.0157%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="92.8291%" y="357" width="0.0127%" height="15" fill="rgb(206,86,44)" fg:x="7327" fg:w="1"/><text x="93.0791%" y="367.50"></text></g><g><title>rust-nexmark`&lt;&amp;std::fs::File as std::io::Read&gt;::read (3 samples, 0.04%)</title><rect x="92.8418%" y="341" width="0.0380%" height="15" fill="rgb(245,177,15)" fg:x="7328" fg:w="3"/><text x="93.0918%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`read (429 samples, 5.44%)</title><rect x="92.8798%" y="325" width="5.4352%" height="15" fill="rgb(206,64,50)" fg:x="7331" fg:w="429"/><text x="93.1298%" y="335.50">libsyst..</text></g><g><title>rust-nexmark`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (433 samples, 5.49%)</title><rect x="92.8418%" y="357" width="5.4859%" height="15" fill="rgb(234,36,40)" fg:x="7328" fg:w="433"/><text x="93.0918%" y="367.50">rust-ne..</text></g><g><title>rust-nexmark`tokio::io::blocking::Buf::read_from (430 samples, 5.45%)</title><rect x="92.8798%" y="341" width="5.4479%" height="15" fill="rgb(213,64,8)" fg:x="7331" fg:w="430"/><text x="93.1298%" y="351.50">rust-ne..</text></g><g><title>rust-nexmark`DYLD-STUB$$read (1 samples, 0.01%)</title><rect x="98.3150%" y="325" width="0.0127%" height="15" fill="rgb(210,75,36)" fg:x="7760" fg:w="1"/><text x="98.5650%" y="335.50"></text></g><g><title>rust-nexmark`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}}&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3276%" y="357" width="0.0127%" height="15" fill="rgb(229,88,21)" fg:x="7761" fg:w="1"/><text x="98.5776%" y="367.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (439 samples, 5.56%)</title><rect x="92.8164%" y="373" width="5.5619%" height="15" fill="rgb(252,204,47)" fg:x="7326" fg:w="439"/><text x="93.0664%" y="383.50">rust-ne..</text></g><g><title>rust-nexmark`tokio::io::blocking::Buf::read_from (3 samples, 0.04%)</title><rect x="98.3403%" y="357" width="0.0380%" height="15" fill="rgb(208,77,27)" fg:x="7762" fg:w="3"/><text x="98.5903%" y="367.50"></text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (126 samples, 1.60%)</title><rect x="98.3783%" y="373" width="1.5964%" height="15" fill="rgb(221,76,26)" fg:x="7765" fg:w="126"/><text x="98.6283%" y="383.50"></text></g><g><title>rust-nexmark`tokio::runtime::driver::Handle::unpark (126 samples, 1.60%)</title><rect x="98.3783%" y="357" width="1.5964%" height="15" fill="rgb(225,139,18)" fg:x="7765" fg:w="126"/><text x="98.6283%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`kevent (126 samples, 1.60%)</title><rect x="98.3783%" y="341" width="1.5964%" height="15" fill="rgb(230,137,11)" fg:x="7765" fg:w="126"/><text x="98.6283%" y="351.50"></text></g><g><title>rust-nexmark`tokio::runtime::blocking::pool::Inner::run (873 samples, 11.06%)</title><rect x="88.9269%" y="405" width="11.0604%" height="15" fill="rgb(212,28,1)" fg:x="7019" fg:w="873"/><text x="89.1769%" y="415.50">rust-nexmark`tok..</text></g><g><title>rust-nexmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (570 samples, 7.22%)</title><rect x="92.7657%" y="389" width="7.2216%" height="15" fill="rgb(248,164,17)" fg:x="7322" fg:w="570"/><text x="93.0157%" y="399.50">rust-nexma..</text></g><g><title>rust-nexmark`tokio::runtime::task::waker::wake_by_ref (1 samples, 0.01%)</title><rect x="99.9747%" y="373" width="0.0127%" height="15" fill="rgb(222,171,42)" fg:x="7891" fg:w="1"/><text x="100.2247%" y="383.50"></text></g><g><title>all (7,893 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="7893"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (874 samples, 11.07%)</title><rect x="88.9269%" y="485" width="11.0731%" height="15" fill="rgb(252,49,23)" fg:x="7019" fg:w="874"/><text x="89.1769%" y="495.50">libsystem_pthrea..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (874 samples, 11.07%)</title><rect x="88.9269%" y="469" width="11.0731%" height="15" fill="rgb(215,19,7)" fg:x="7019" fg:w="874"/><text x="89.1769%" y="479.50">libsystem_pthrea..</text></g><g><title>rust-nexmark`std::sys::unix::thread::Thread::new::thread_start (874 samples, 11.07%)</title><rect x="88.9269%" y="453" width="11.0731%" height="15" fill="rgb(238,81,41)" fg:x="7019" fg:w="874"/><text x="89.1769%" y="463.50">rust-nexmark`std..</text></g><g><title>rust-nexmark`core::ops::function::FnOnce::call_once{{vtable.shim}} (874 samples, 11.07%)</title><rect x="88.9269%" y="437" width="11.0731%" height="15" fill="rgb(210,199,37)" fg:x="7019" fg:w="874"/><text x="89.1769%" y="447.50">rust-nexmark`cor..</text></g><g><title>rust-nexmark`std::sys_common::backtrace::__rust_begin_short_backtrace (874 samples, 11.07%)</title><rect x="88.9269%" y="421" width="11.0731%" height="15" fill="rgb(244,192,49)" fg:x="7019" fg:w="874"/><text x="89.1769%" y="431.50">rust-nexmark`std..</text></g><g><title>rust-nexmark`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="99.9873%" y="405" width="0.0127%" height="15" fill="rgb(226,211,11)" fg:x="7892" fg:w="1"/><text x="100.2373%" y="415.50"></text></g></svg></svg>