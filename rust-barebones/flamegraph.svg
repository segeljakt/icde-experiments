<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="7996"><g><title>rust-barebones`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0125%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>rust-barebones`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0125%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>rust-barebones`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0125%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>rust-barebones`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0125%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0125%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0125%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>libobjc.A.dylib`initializeAndMaybeRelock(objc_class*, objc_object*, locker_mixin&lt;lockdebug::lock_mixin (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0125%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0125%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0125%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>libobjc.A.dylib`CALLING_SOME_+initialize_METHOD (1 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0125%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0125%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0125%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libobjc.A.dylib`getMethodFromRelativeList(relative_list_list_t&lt;method_list_t&gt;*, objc_selector*) (1 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0125%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.03%)</title><rect x="0.1126%" y="309" width="0.0250%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="2"/><text x="0.3626%" y="319.50"></text></g><g><title>rust-barebones`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.1376%" y="309" width="0.0125%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="0.3876%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.04%)</title><rect x="0.1501%" y="277" width="0.0375%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="3"/><text x="0.4001%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.25%)</title><rect x="0.2001%" y="261" width="0.2501%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="20"/><text x="0.4501%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 0.06%)</title><rect x="0.4502%" y="261" width="0.0625%" height="15" fill="rgb(210,31,41)" fg:x="36" fg:w="5"/><text x="0.7002%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::task::raw::poll (2 samples, 0.03%)</title><rect x="0.5128%" y="261" width="0.0250%" height="15" fill="rgb(221,200,47)" fg:x="41" fg:w="2"/><text x="0.7628%" y="271.50"></text></g><g><title>rust-barebones`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.01%)</title><rect x="0.5378%" y="261" width="0.0125%" height="15" fill="rgb(226,26,5)" fg:x="43" fg:w="1"/><text x="0.7878%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6 samples, 0.08%)</title><rect x="0.6253%" y="245" width="0.0750%" height="15" fill="rgb(249,33,26)" fg:x="50" fg:w="6"/><text x="0.8753%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.11%)</title><rect x="0.7629%" y="229" width="0.1126%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="9"/><text x="1.0129%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (79 samples, 0.99%)</title><rect x="0.8754%" y="229" width="0.9880%" height="15" fill="rgb(221,5,38)" fg:x="70" fg:w="79"/><text x="1.1254%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (89 samples, 1.11%)</title><rect x="1.8634%" y="229" width="1.1131%" height="15" fill="rgb(247,18,42)" fg:x="149" fg:w="89"/><text x="2.1134%" y="239.50"></text></g><g><title>rust-barebones`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (8 samples, 0.10%)</title><rect x="2.9765%" y="229" width="0.1001%" height="15" fill="rgb(241,131,45)" fg:x="238" fg:w="8"/><text x="3.2265%" y="239.50"></text></g><g><title>rust-barebones`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.0765%" y="229" width="0.0125%" height="15" fill="rgb(249,31,29)" fg:x="246" fg:w="1"/><text x="3.3265%" y="239.50"></text></g><g><title>rust-barebones`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (6 samples, 0.08%)</title><rect x="3.0890%" y="229" width="0.0750%" height="15" fill="rgb(225,111,53)" fg:x="247" fg:w="6"/><text x="3.3390%" y="239.50"></text></g><g><title>rust-barebones`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="3.1641%" y="229" width="0.0625%" height="15" fill="rgb(238,160,17)" fg:x="253" fg:w="5"/><text x="3.4141%" y="239.50"></text></g><g><title>rust-barebones`DYLD-STUB$$free (11 samples, 0.14%)</title><rect x="3.2266%" y="229" width="0.1376%" height="15" fill="rgb(214,148,48)" fg:x="258" fg:w="11"/><text x="3.4766%" y="239.50"></text></g><g><title>rust-barebones`DYLD-STUB$$memcpy (15 samples, 0.19%)</title><rect x="3.3642%" y="229" width="0.1876%" height="15" fill="rgb(232,36,49)" fg:x="269" fg:w="15"/><text x="3.6142%" y="239.50"></text></g><g><title>rust-barebones`rust_barebones::_::_&lt;impl serde::de::Deserialize for rust_barebones::Bid&gt;::deserialize (12 samples, 0.15%)</title><rect x="3.5518%" y="229" width="0.1501%" height="15" fill="rgb(209,103,24)" fg:x="284" fg:w="12"/><text x="3.8018%" y="239.50"></text></g><g><title>rust-barebones`tokio::io::util::sink::sink (1 samples, 0.01%)</title><rect x="3.7019%" y="229" width="0.0125%" height="15" fill="rgb(229,88,8)" fg:x="296" fg:w="1"/><text x="3.9519%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (132 samples, 1.65%)</title><rect x="6.3657%" y="213" width="1.6508%" height="15" fill="rgb(213,181,19)" fg:x="509" fg:w="132"/><text x="6.6157%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.08%)</title><rect x="8.0165%" y="213" width="0.0750%" height="15" fill="rgb(254,191,54)" fg:x="641" fg:w="6"/><text x="8.2665%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (167 samples, 2.09%)</title><rect x="8.0915%" y="213" width="2.0885%" height="15" fill="rgb(241,83,37)" fg:x="647" fg:w="167"/><text x="8.3415%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`_szone_free (76 samples, 0.95%)</title><rect x="10.1801%" y="213" width="0.9505%" height="15" fill="rgb(233,36,39)" fg:x="814" fg:w="76"/><text x="10.4301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (76 samples, 0.95%)</title><rect x="10.1801%" y="197" width="0.9505%" height="15" fill="rgb(226,3,54)" fg:x="814" fg:w="76"/><text x="10.4301%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (76 samples, 0.95%)</title><rect x="10.1801%" y="181" width="0.9505%" height="15" fill="rgb(245,192,40)" fg:x="814" fg:w="76"/><text x="10.4301%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (76 samples, 0.95%)</title><rect x="10.1801%" y="165" width="0.9505%" height="15" fill="rgb(238,167,29)" fg:x="814" fg:w="76"/><text x="10.4301%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.15%)</title><rect x="11.1306%" y="213" width="0.1501%" height="15" fill="rgb(232,182,51)" fg:x="890" fg:w="12"/><text x="11.3806%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (311 samples, 3.89%)</title><rect x="11.2806%" y="213" width="3.8894%" height="15" fill="rgb(231,60,39)" fg:x="902" fg:w="311"/><text x="11.5306%" y="223.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memset (46 samples, 0.58%)</title><rect x="15.1701%" y="213" width="0.5753%" height="15" fill="rgb(208,69,12)" fg:x="1213" fg:w="46"/><text x="15.4201%" y="223.50"></text></g><g><title>rust-barebones`&lt;&amp;mut rust_barebones::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_string (43 samples, 0.54%)</title><rect x="15.7454%" y="213" width="0.5378%" height="15" fill="rgb(235,93,37)" fg:x="1259" fg:w="43"/><text x="15.9954%" y="223.50"></text></g><g><title>rust-barebones`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (7 samples, 0.09%)</title><rect x="16.2831%" y="213" width="0.0875%" height="15" fill="rgb(213,116,39)" fg:x="1302" fg:w="7"/><text x="16.5331%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (168 samples, 2.10%)</title><rect x="17.0835%" y="197" width="2.1011%" height="15" fill="rgb(222,207,29)" fg:x="1366" fg:w="168"/><text x="17.3335%" y="207.50">l..</text></g><g><title>rust-barebones`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.03%)</title><rect x="19.1846%" y="197" width="0.0250%" height="15" fill="rgb(206,96,30)" fg:x="1534" fg:w="2"/><text x="19.4346%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="19.3097%" y="181" width="0.0250%" height="15" fill="rgb(218,138,4)" fg:x="1544" fg:w="2"/><text x="19.5597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="19.3347%" y="181" width="0.0250%" height="15" fill="rgb(250,191,14)" fg:x="1546" fg:w="2"/><text x="19.5847%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (5 samples, 0.06%)</title><rect x="19.3597%" y="181" width="0.0625%" height="15" fill="rgb(239,60,40)" fg:x="1548" fg:w="5"/><text x="19.6097%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.93%)</title><rect x="19.4222%" y="181" width="0.9255%" height="15" fill="rgb(206,27,48)" fg:x="1553" fg:w="74"/><text x="19.6722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.04%)</title><rect x="20.4727%" y="165" width="0.0375%" height="15" fill="rgb(225,35,8)" fg:x="1637" fg:w="3"/><text x="20.7227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="20.5103%" y="165" width="0.0250%" height="15" fill="rgb(250,213,24)" fg:x="1640" fg:w="2"/><text x="20.7603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.05%)</title><rect x="20.5853%" y="149" width="0.0500%" height="15" fill="rgb(247,123,22)" fg:x="1646" fg:w="4"/><text x="20.8353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="20.7229%" y="133" width="0.0125%" height="15" fill="rgb(231,138,38)" fg:x="1657" fg:w="1"/><text x="20.9729%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.24%)</title><rect x="20.5353%" y="165" width="0.2376%" height="15" fill="rgb(231,145,46)" fg:x="1642" fg:w="19"/><text x="20.7853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.14%)</title><rect x="20.6353%" y="149" width="0.1376%" height="15" fill="rgb(251,118,11)" fg:x="1650" fg:w="11"/><text x="20.8853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.04%)</title><rect x="20.7354%" y="133" width="0.0375%" height="15" fill="rgb(217,147,25)" fg:x="1658" fg:w="3"/><text x="20.9854%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.04%)</title><rect x="20.7729%" y="165" width="0.0375%" height="15" fill="rgb(247,81,37)" fg:x="1661" fg:w="3"/><text x="21.0229%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="20.8104%" y="165" width="0.0250%" height="15" fill="rgb(209,12,38)" fg:x="1664" fg:w="2"/><text x="21.0604%" y="175.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (25 samples, 0.31%)</title><rect x="20.8354%" y="149" width="0.3127%" height="15" fill="rgb(227,1,9)" fg:x="1666" fg:w="25"/><text x="21.0854%" y="159.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::set_join_waker (1 samples, 0.01%)</title><rect x="21.1356%" y="133" width="0.0125%" height="15" fill="rgb(248,47,43)" fg:x="1690" fg:w="1"/><text x="21.3856%" y="143.50"></text></g><g><title>rust-barebones`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.36%)</title><rect x="20.8354%" y="165" width="0.3627%" height="15" fill="rgb(221,10,30)" fg:x="1666" fg:w="29"/><text x="21.0854%" y="175.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::can_read_output (4 samples, 0.05%)</title><rect x="21.1481%" y="149" width="0.0500%" height="15" fill="rgb(210,229,1)" fg:x="1691" fg:w="4"/><text x="21.3981%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.04%)</title><rect x="21.2231%" y="149" width="0.0375%" height="15" fill="rgb(222,148,37)" fg:x="1697" fg:w="3"/><text x="21.4731%" y="159.50"></text></g><g><title>rust-barebones`__rdl_alloc (1 samples, 0.01%)</title><rect x="21.2606%" y="149" width="0.0125%" height="15" fill="rgb(234,67,33)" fg:x="1700" fg:w="1"/><text x="21.5106%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (2 samples, 0.03%)</title><rect x="21.3107%" y="133" width="0.0250%" height="15" fill="rgb(247,98,35)" fg:x="1704" fg:w="2"/><text x="21.5607%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.01%)</title><rect x="21.3732%" y="117" width="0.0125%" height="15" fill="rgb(247,138,52)" fg:x="1709" fg:w="1"/><text x="21.6232%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.05%)</title><rect x="21.3982%" y="69" width="0.0500%" height="15" fill="rgb(213,79,30)" fg:x="1711" fg:w="4"/><text x="21.6482%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.05%)</title><rect x="21.3982%" y="53" width="0.0500%" height="15" fill="rgb(246,177,23)" fg:x="1711" fg:w="4"/><text x="21.6482%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="21.4482%" y="53" width="0.0125%" height="15" fill="rgb(230,62,27)" fg:x="1715" fg:w="1"/><text x="21.6982%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="21.4607%" y="53" width="0.0125%" height="15" fill="rgb(216,154,8)" fg:x="1716" fg:w="1"/><text x="21.7107%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.03%)</title><rect x="21.5233%" y="37" width="0.0250%" height="15" fill="rgb(244,35,45)" fg:x="1721" fg:w="2"/><text x="21.7733%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.14%)</title><rect x="21.4482%" y="69" width="0.1376%" height="15" fill="rgb(251,115,12)" fg:x="1715" fg:w="11"/><text x="21.6982%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.11%)</title><rect x="21.4732%" y="53" width="0.1126%" height="15" fill="rgb(240,54,50)" fg:x="1717" fg:w="9"/><text x="21.7232%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="21.5483%" y="37" width="0.0375%" height="15" fill="rgb(233,84,52)" fg:x="1723" fg:w="3"/><text x="21.7983%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (17 samples, 0.21%)</title><rect x="21.3857%" y="101" width="0.2126%" height="15" fill="rgb(207,117,47)" fg:x="1710" fg:w="17"/><text x="21.6357%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (17 samples, 0.21%)</title><rect x="21.3857%" y="85" width="0.2126%" height="15" fill="rgb(249,43,39)" fg:x="1710" fg:w="17"/><text x="21.6357%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="21.5858%" y="69" width="0.0125%" height="15" fill="rgb(209,38,44)" fg:x="1726" fg:w="1"/><text x="21.8358%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_memalign (1 samples, 0.01%)</title><rect x="21.5983%" y="101" width="0.0125%" height="15" fill="rgb(236,212,23)" fg:x="1727" fg:w="1"/><text x="21.8483%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_memalign (1 samples, 0.01%)</title><rect x="21.6108%" y="101" width="0.0125%" height="15" fill="rgb(242,79,21)" fg:x="1728" fg:w="1"/><text x="21.8608%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_memalign (1 samples, 0.01%)</title><rect x="21.6233%" y="101" width="0.0125%" height="15" fill="rgb(211,96,35)" fg:x="1729" fg:w="1"/><text x="21.8733%" y="111.50"></text></g><g><title>rust-barebones`__rdl_alloc (26 samples, 0.33%)</title><rect x="21.3357%" y="133" width="0.3252%" height="15" fill="rgb(253,215,40)" fg:x="1706" fg:w="26"/><text x="21.5857%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (22 samples, 0.28%)</title><rect x="21.3857%" y="117" width="0.2751%" height="15" fill="rgb(211,81,21)" fg:x="1710" fg:w="22"/><text x="21.6357%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (2 samples, 0.03%)</title><rect x="21.6358%" y="101" width="0.0250%" height="15" fill="rgb(208,190,38)" fg:x="1730" fg:w="2"/><text x="21.8858%" y="111.50"></text></g><g><title>rust-barebones`parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.03%)</title><rect x="21.6608%" y="133" width="0.0250%" height="15" fill="rgb(235,213,38)" fg:x="1732" fg:w="2"/><text x="21.9108%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.01%)</title><rect x="21.7234%" y="117" width="0.0125%" height="15" fill="rgb(237,122,38)" fg:x="1737" fg:w="1"/><text x="21.9734%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.01%)</title><rect x="21.7234%" y="101" width="0.0125%" height="15" fill="rgb(244,218,35)" fg:x="1737" fg:w="1"/><text x="21.9734%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="21.7359%" y="117" width="0.0125%" height="15" fill="rgb(240,68,47)" fg:x="1738" fg:w="1"/><text x="21.9859%" y="127.50"></text></g><g><title>rust-barebones`parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.08%)</title><rect x="21.7484%" y="117" width="0.0750%" height="15" fill="rgb(210,16,53)" fg:x="1739" fg:w="6"/><text x="21.9984%" y="127.50"></text></g><g><title>rust-barebones`parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.01%)</title><rect x="21.8109%" y="101" width="0.0125%" height="15" fill="rgb(235,124,12)" fg:x="1744" fg:w="1"/><text x="22.0609%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (304 samples, 3.80%)</title><rect x="22.0985%" y="101" width="3.8019%" height="15" fill="rgb(224,169,11)" fg:x="1767" fg:w="304"/><text x="22.3485%" y="111.50">libs..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvsignal (1 samples, 0.01%)</title><rect x="25.9005%" y="101" width="0.0125%" height="15" fill="rgb(250,166,2)" fg:x="2071" fg:w="1"/><text x="26.1505%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="25.9130%" y="101" width="0.0250%" height="15" fill="rgb(242,216,29)" fg:x="2072" fg:w="2"/><text x="26.1630%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (2 samples, 0.03%)</title><rect x="25.9380%" y="101" width="0.0250%" height="15" fill="rgb(230,116,27)" fg:x="2074" fg:w="2"/><text x="26.1880%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="25.9630%" y="101" width="0.0125%" height="15" fill="rgb(228,99,48)" fg:x="2076" fg:w="1"/><text x="26.2130%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.01%)</title><rect x="25.9755%" y="69" width="0.0125%" height="15" fill="rgb(253,11,6)" fg:x="2077" fg:w="1"/><text x="26.2255%" y="79.50"></text></g><g><title>rust-barebones`tokio::runtime::blocking::pool::Spawner::spawn_blocking (378 samples, 4.73%)</title><rect x="21.2731%" y="149" width="4.7274%" height="15" fill="rgb(247,143,39)" fg:x="1701" fg:w="378"/><text x="21.5231%" y="159.50">rust-b..</text></g><g><title>rust-barebones`tokio::runtime::blocking::pool::Spawner::spawn_task (345 samples, 4.31%)</title><rect x="21.6858%" y="133" width="4.3147%" height="15" fill="rgb(236,97,10)" fg:x="1734" fg:w="345"/><text x="21.9358%" y="143.50">rust-..</text></g><g><title>rust-barebones`parking_lot::raw_mutex::RawMutex::unlock_slow (334 samples, 4.18%)</title><rect x="21.8234%" y="117" width="4.1771%" height="15" fill="rgb(233,208,19)" fg:x="1745" fg:w="334"/><text x="22.0734%" y="127.50">rust-..</text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="25.9755%" y="101" width="0.0250%" height="15" fill="rgb(216,164,2)" fg:x="2077" fg:w="2"/><text x="26.2255%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.03%)</title><rect x="25.9755%" y="85" width="0.0250%" height="15" fill="rgb(220,129,5)" fg:x="2077" fg:w="2"/><text x="26.2255%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.01%)</title><rect x="25.9880%" y="69" width="0.0125%" height="15" fill="rgb(242,17,10)" fg:x="2078" fg:w="1"/><text x="26.2380%" y="79.50"></text></g><g><title>rust-barebones`tokio::runtime::blocking::pool::spawn_blocking (385 samples, 4.81%)</title><rect x="21.1981%" y="165" width="4.8149%" height="15" fill="rgb(242,107,0)" fg:x="1695" fg:w="385"/><text x="21.4481%" y="175.50">rust-b..</text></g><g><title>rust-barebones`tokio::runtime::handle::Handle::current (1 samples, 0.01%)</title><rect x="26.0005%" y="149" width="0.0125%" height="15" fill="rgb(251,28,31)" fg:x="2079" fg:w="1"/><text x="26.2505%" y="159.50"></text></g><g><title>rust-barebones`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}}&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="26.2381%" y="149" width="0.0125%" height="15" fill="rgb(233,223,10)" fg:x="2098" fg:w="1"/><text x="26.4881%" y="159.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (20 samples, 0.25%)</title><rect x="26.0130%" y="165" width="0.2501%" height="15" fill="rgb(215,21,27)" fg:x="2080" fg:w="20"/><text x="26.2630%" y="175.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.01%)</title><rect x="26.2506%" y="149" width="0.0125%" height="15" fill="rgb(232,23,21)" fg:x="2099" fg:w="1"/><text x="26.5006%" y="159.50"></text></g><g><title>rust-barebones`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}}&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="26.2506%" y="133" width="0.0125%" height="15" fill="rgb(244,5,23)" fg:x="2099" fg:w="1"/><text x="26.5006%" y="143.50"></text></g><g><title>rust-barebones`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (476 samples, 5.95%)</title><rect x="20.3477%" y="181" width="5.9530%" height="15" fill="rgb(226,81,46)" fg:x="1627" fg:w="476"/><text x="20.5977%" y="191.50">rust-bar..</text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (3 samples, 0.04%)</title><rect x="26.2631%" y="165" width="0.0375%" height="15" fill="rgb(247,70,30)" fg:x="2100" fg:w="3"/><text x="26.5131%" y="175.50"></text></g><g><title>rust-barebones`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="26.3007%" y="181" width="0.0125%" height="15" fill="rgb(212,68,19)" fg:x="2103" fg:w="1"/><text x="26.5507%" y="191.50"></text></g><g><title>rust-barebones`&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (569 samples, 7.12%)</title><rect x="19.2096%" y="197" width="7.1161%" height="15" fill="rgb(240,187,13)" fg:x="1536" fg:w="569"/><text x="19.4596%" y="207.50">rust-bareb..</text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.01%)</title><rect x="26.3132%" y="181" width="0.0125%" height="15" fill="rgb(223,113,26)" fg:x="2104" fg:w="1"/><text x="26.5632%" y="191.50"></text></g><g><title>rust-barebones`DYLD-STUB$$memchr (6 samples, 0.08%)</title><rect x="26.3257%" y="197" width="0.0750%" height="15" fill="rgb(206,192,2)" fg:x="2105" fg:w="6"/><text x="26.5757%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.03%)</title><rect x="26.4007%" y="117" width="0.0250%" height="15" fill="rgb(241,108,4)" fg:x="2111" fg:w="2"/><text x="26.6507%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.03%)</title><rect x="26.4007%" y="101" width="0.0250%" height="15" fill="rgb(247,173,49)" fg:x="2111" fg:w="2"/><text x="26.6507%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="26.4257%" y="117" width="0.0250%" height="15" fill="rgb(224,114,35)" fg:x="2113" fg:w="2"/><text x="26.6757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.03%)</title><rect x="26.4257%" y="101" width="0.0250%" height="15" fill="rgb(245,159,27)" fg:x="2113" fg:w="2"/><text x="26.6757%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.03%)</title><rect x="26.4257%" y="85" width="0.0250%" height="15" fill="rgb(245,172,44)" fg:x="2113" fg:w="2"/><text x="26.6757%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.03%)</title><rect x="26.4257%" y="69" width="0.0250%" height="15" fill="rgb(236,23,11)" fg:x="2113" fg:w="2"/><text x="26.6757%" y="79.50"></text></g><g><title>rust-barebones`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.06%)</title><rect x="26.4007%" y="197" width="0.0625%" height="15" fill="rgb(205,117,38)" fg:x="2111" fg:w="5"/><text x="26.6507%" y="207.50"></text></g><g><title>rust-barebones`alloc::raw_vec::finish_grow (5 samples, 0.06%)</title><rect x="26.4007%" y="181" width="0.0625%" height="15" fill="rgb(237,72,25)" fg:x="2111" fg:w="5"/><text x="26.6507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.06%)</title><rect x="26.4007%" y="165" width="0.0625%" height="15" fill="rgb(244,70,9)" fg:x="2111" fg:w="5"/><text x="26.6507%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.06%)</title><rect x="26.4007%" y="149" width="0.0625%" height="15" fill="rgb(217,125,39)" fg:x="2111" fg:w="5"/><text x="26.6507%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.06%)</title><rect x="26.4007%" y="133" width="0.0625%" height="15" fill="rgb(235,36,10)" fg:x="2111" fg:w="5"/><text x="26.6507%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="26.4507%" y="117" width="0.0125%" height="15" fill="rgb(251,123,47)" fg:x="2115" fg:w="1"/><text x="26.7007%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="26.4507%" y="101" width="0.0125%" height="15" fill="rgb(221,13,13)" fg:x="2115" fg:w="1"/><text x="26.7007%" y="111.50"></text></g><g><title>rust-barebones`&lt;tokio::io::util::read_until::ReadUntil&lt;R&gt; as core::future::future::Future&gt;::poll (808 samples, 10.11%)</title><rect x="16.3707%" y="213" width="10.1051%" height="15" fill="rgb(238,131,9)" fg:x="1309" fg:w="808"/><text x="16.6207%" y="223.50">rust-barebones`..</text></g><g><title>rust-barebones`tokio::io::read_buf::slice_to_uninit_mut (1 samples, 0.01%)</title><rect x="26.4632%" y="197" width="0.0125%" height="15" fill="rgb(211,50,8)" fg:x="2116" fg:w="1"/><text x="26.7132%" y="207.50"></text></g><g><title>rust-barebones`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (9 samples, 0.11%)</title><rect x="26.4757%" y="213" width="0.1126%" height="15" fill="rgb(245,182,24)" fg:x="2117" fg:w="9"/><text x="26.7257%" y="223.50"></text></g><g><title>rust-barebones`&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="26.5883%" y="213" width="0.0625%" height="15" fill="rgb(242,14,37)" fg:x="2126" fg:w="5"/><text x="26.8383%" y="223.50"></text></g><g><title>rust-barebones`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="26.6508%" y="213" width="0.0125%" height="15" fill="rgb(246,228,12)" fg:x="2131" fg:w="1"/><text x="26.9008%" y="223.50"></text></g><g><title>rust-barebones`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (64 samples, 0.80%)</title><rect x="26.6633%" y="213" width="0.8004%" height="15" fill="rgb(213,55,15)" fg:x="2132" fg:w="64"/><text x="26.9133%" y="223.50"></text></g><g><title>rust-barebones`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (10 samples, 0.13%)</title><rect x="27.4637%" y="213" width="0.1251%" height="15" fill="rgb(209,9,3)" fg:x="2196" fg:w="10"/><text x="27.7137%" y="223.50"></text></g><g><title>rust-barebones`DYLD-STUB$$memcpy (8 samples, 0.10%)</title><rect x="27.5888%" y="213" width="0.1001%" height="15" fill="rgb(230,59,30)" fg:x="2206" fg:w="8"/><text x="27.8388%" y="223.50"></text></g><g><title>rust-barebones`DYLD-STUB$$memmove (1 samples, 0.01%)</title><rect x="27.6888%" y="213" width="0.0125%" height="15" fill="rgb(209,121,21)" fg:x="2214" fg:w="1"/><text x="27.9388%" y="223.50"></text></g><g><title>rust-barebones`csv_core::reader::Reader::read_record (2 samples, 0.03%)</title><rect x="27.7014%" y="213" width="0.0250%" height="15" fill="rgb(220,109,13)" fg:x="2215" fg:w="2"/><text x="27.9514%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 1.05%)</title><rect x="29.1646%" y="197" width="1.0505%" height="15" fill="rgb(232,18,1)" fg:x="2332" fg:w="84"/><text x="29.4146%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (160 samples, 2.00%)</title><rect x="30.2151%" y="197" width="2.0010%" height="15" fill="rgb(215,41,42)" fg:x="2416" fg:w="160"/><text x="30.4651%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (101 samples, 1.26%)</title><rect x="32.2161%" y="197" width="1.2631%" height="15" fill="rgb(224,123,36)" fg:x="2576" fg:w="101"/><text x="32.4661%" y="207.50"></text></g><g><title>rust-barebones`&lt;&amp;mut rust_barebones::Deserializer&lt;_&gt; as serde::de::Deserializer&gt;::deserialize_string (94 samples, 1.18%)</title><rect x="33.4792%" y="197" width="1.1756%" height="15" fill="rgb(240,125,3)" fg:x="2677" fg:w="94"/><text x="33.7292%" y="207.50"></text></g><g><title>rust-barebones`rust_barebones::Deserializer&lt;_&gt;::read_bytes (51 samples, 0.64%)</title><rect x="34.0170%" y="181" width="0.6378%" height="15" fill="rgb(205,98,50)" fg:x="2720" fg:w="51"/><text x="34.2670%" y="191.50"></text></g><g><title>rust-barebones`DYLD-STUB$$malloc (14 samples, 0.18%)</title><rect x="34.6548%" y="197" width="0.1751%" height="15" fill="rgb(205,185,37)" fg:x="2771" fg:w="14"/><text x="34.9048%" y="207.50"></text></g><g><title>rust-barebones`DYLD-STUB$$memcpy (9 samples, 0.11%)</title><rect x="34.8299%" y="197" width="0.1126%" height="15" fill="rgb(238,207,15)" fg:x="2785" fg:w="9"/><text x="35.0799%" y="207.50"></text></g><g><title>rust-barebones`__rdl_alloc (12 samples, 0.15%)</title><rect x="34.9425%" y="197" width="0.1501%" height="15" fill="rgb(213,199,42)" fg:x="2794" fg:w="12"/><text x="35.1925%" y="207.50"></text></g><g><title>rust-barebones`atoi::atoi (27 samples, 0.34%)</title><rect x="35.0925%" y="197" width="0.3377%" height="15" fill="rgb(235,201,11)" fg:x="2806" fg:w="27"/><text x="35.3425%" y="207.50"></text></g><g><title>rust-barebones`core::str::converts::from_utf8 (568 samples, 7.10%)</title><rect x="35.4302%" y="197" width="7.1036%" height="15" fill="rgb(207,46,11)" fg:x="2833" fg:w="568"/><text x="35.6802%" y="207.50">rust-bareb..</text></g><g><title>rust-barebones`csv_core::reader::Reader::read_record (45 samples, 0.56%)</title><rect x="42.5338%" y="197" width="0.5628%" height="15" fill="rgb(241,35,35)" fg:x="3401" fg:w="45"/><text x="42.7838%" y="207.50"></text></g><g><title>rust-barebones`rust_barebones::Deserializer&lt;_&gt;::read_bytes (3 samples, 0.04%)</title><rect x="43.0965%" y="197" width="0.0375%" height="15" fill="rgb(243,32,47)" fg:x="3446" fg:w="3"/><text x="43.3465%" y="207.50"></text></g><g><title>rust-barebones`atoi::Sign::try_from (14 samples, 0.18%)</title><rect x="43.8594%" y="181" width="0.1751%" height="15" fill="rgb(247,202,23)" fg:x="3507" fg:w="14"/><text x="44.1094%" y="191.50"></text></g><g><title>rust-barebones`atoi::atoi (224 samples, 2.80%)</title><rect x="44.0345%" y="181" width="2.8014%" height="15" fill="rgb(219,102,11)" fg:x="3521" fg:w="224"/><text x="44.2845%" y="191.50">ru..</text></g><g><title>rust-barebones`csv_core::reader::Reader::read_record (1,287 samples, 16.10%)</title><rect x="46.8359%" y="181" width="16.0955%" height="15" fill="rgb(243,110,44)" fg:x="3745" fg:w="1287"/><text x="47.0859%" y="191.50">rust-barebones`csv_core::..</text></g><g><title>rust-barebones`rust_barebones::_::_&lt;impl serde::de::Deserialize for rust_barebones::Bid&gt;::deserialize (2,871 samples, 35.91%)</title><rect x="27.7264%" y="213" width="35.9055%" height="15" fill="rgb(222,74,54)" fg:x="2217" fg:w="2871"/><text x="27.9764%" y="223.50">rust-barebones`rust_barebones::_::_&lt;impl serde::de::Deseri..</text></g><g><title>rust-barebones`serde::de::SeqAccess::next_element (1,639 samples, 20.50%)</title><rect x="43.1341%" y="197" width="20.4977%" height="15" fill="rgb(216,99,12)" fg:x="3449" fg:w="1639"/><text x="43.3841%" y="207.50">rust-barebones`serde::de::SeqAcc..</text></g><g><title>rust-barebones`rust_barebones::Deserializer&lt;_&gt;::read_bytes (56 samples, 0.70%)</title><rect x="62.9315%" y="181" width="0.7004%" height="15" fill="rgb(226,22,26)" fg:x="5032" fg:w="56"/><text x="63.1815%" y="191.50"></text></g><g><title>rust-barebones`serde::de::SeqAccess::next_element (14 samples, 0.18%)</title><rect x="63.6318%" y="213" width="0.1751%" height="15" fill="rgb(217,163,10)" fg:x="5088" fg:w="14"/><text x="63.8818%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::coop::Budget::decrement (7 samples, 0.09%)</title><rect x="63.8069%" y="213" width="0.0875%" height="15" fill="rgb(213,25,53)" fg:x="5102" fg:w="7"/><text x="64.0569%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::coop::RestoreOnPending::made_progress (2 samples, 0.03%)</title><rect x="63.8944%" y="213" width="0.0250%" height="15" fill="rgb(252,105,26)" fg:x="5109" fg:w="2"/><text x="64.1444%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.03%)</title><rect x="63.9195%" y="213" width="0.0250%" height="15" fill="rgb(220,39,43)" fg:x="5111" fg:w="2"/><text x="64.1695%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="63.9445%" y="213" width="0.0125%" height="15" fill="rgb(229,68,48)" fg:x="5113" fg:w="1"/><text x="64.1945%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="63.9570%" y="213" width="0.0125%" height="15" fill="rgb(252,8,32)" fg:x="5114" fg:w="1"/><text x="64.2070%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.05%)</title><rect x="63.9820%" y="197" width="0.0500%" height="15" fill="rgb(223,20,43)" fg:x="5116" fg:w="4"/><text x="64.2320%" y="207.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.04%)</title><rect x="64.0320%" y="197" width="0.0375%" height="15" fill="rgb(229,81,49)" fg:x="5120" fg:w="3"/><text x="64.2820%" y="207.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_val (9 samples, 0.11%)</title><rect x="63.9695%" y="213" width="0.1126%" height="15" fill="rgb(236,28,36)" fg:x="5115" fg:w="9"/><text x="64.2195%" y="223.50"></text></g><g><title>rust-barebones`tokio::task::local::Shared::schedule (1 samples, 0.01%)</title><rect x="64.0695%" y="197" width="0.0125%" height="15" fill="rgb(249,185,26)" fg:x="5123" fg:w="1"/><text x="64.3195%" y="207.50"></text></g><g><title>rust-barebones`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (9 samples, 0.11%)</title><rect x="64.0820%" y="213" width="0.1126%" height="15" fill="rgb(249,174,33)" fg:x="5124" fg:w="9"/><text x="64.3320%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.10%)</title><rect x="64.7449%" y="197" width="0.1001%" height="15" fill="rgb(233,201,37)" fg:x="5177" fg:w="8"/><text x="64.9949%" y="207.50"></text></g><g><title>rust-barebones`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (5 samples, 0.06%)</title><rect x="64.8449%" y="197" width="0.0625%" height="15" fill="rgb(221,78,26)" fg:x="5185" fg:w="5"/><text x="65.0949%" y="207.50"></text></g><g><title>rust-barebones`&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (3 samples, 0.04%)</title><rect x="64.9075%" y="197" width="0.0375%" height="15" fill="rgb(250,127,30)" fg:x="5190" fg:w="3"/><text x="65.1575%" y="207.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_val (2 samples, 0.03%)</title><rect x="64.9450%" y="197" width="0.0250%" height="15" fill="rgb(230,49,44)" fg:x="5193" fg:w="2"/><text x="65.1950%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.13%)</title><rect x="65.5078%" y="165" width="0.1251%" height="15" fill="rgb(229,67,23)" fg:x="5238" fg:w="10"/><text x="65.7578%" y="175.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.03%)</title><rect x="65.6328%" y="165" width="0.0250%" height="15" fill="rgb(249,83,47)" fg:x="5248" fg:w="2"/><text x="65.8828%" y="175.50"></text></g><g><title>rust-barebones`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (56 samples, 0.70%)</title><rect x="64.9700%" y="197" width="0.7004%" height="15" fill="rgb(215,43,3)" fg:x="5195" fg:w="56"/><text x="65.2200%" y="207.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_val (13 samples, 0.16%)</title><rect x="65.5078%" y="181" width="0.1626%" height="15" fill="rgb(238,154,13)" fg:x="5238" fg:w="13"/><text x="65.7578%" y="191.50"></text></g><g><title>rust-barebones`tokio::task::local::Shared::schedule (1 samples, 0.01%)</title><rect x="65.6578%" y="165" width="0.0125%" height="15" fill="rgb(219,56,2)" fg:x="5250" fg:w="1"/><text x="65.9078%" y="175.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::block::is_ready (4 samples, 0.05%)</title><rect x="65.6703%" y="197" width="0.0500%" height="15" fill="rgb(233,0,4)" fg:x="5251" fg:w="4"/><text x="65.9203%" y="207.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::block::is_tx_closed (1 samples, 0.01%)</title><rect x="65.7204%" y="197" width="0.0125%" height="15" fill="rgb(235,30,7)" fg:x="5255" fg:w="1"/><text x="65.9704%" y="207.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (49 samples, 0.61%)</title><rect x="65.7329%" y="197" width="0.6128%" height="15" fill="rgb(250,79,13)" fg:x="5256" fg:w="49"/><text x="65.9829%" y="207.50"></text></g><g><title>rust-barebones`core::sync::atomic::atomic_compare_exchange (2 samples, 0.03%)</title><rect x="66.3207%" y="181" width="0.0250%" height="15" fill="rgb(211,146,34)" fg:x="5303" fg:w="2"/><text x="66.5707%" y="191.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (175 samples, 2.19%)</title><rect x="64.1946%" y="213" width="2.1886%" height="15" fill="rgb(228,22,38)" fg:x="5133" fg:w="175"/><text x="64.4446%" y="223.50">r..</text></g><g><title>rust-barebones`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.04%)</title><rect x="66.3457%" y="197" width="0.0375%" height="15" fill="rgb(235,168,5)" fg:x="5305" fg:w="3"/><text x="66.5957%" y="207.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (33 samples, 0.41%)</title><rect x="66.3832%" y="213" width="0.4127%" height="15" fill="rgb(221,155,16)" fg:x="5308" fg:w="33"/><text x="66.6332%" y="223.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (23 samples, 0.29%)</title><rect x="66.7959%" y="213" width="0.2876%" height="15" fill="rgb(215,215,53)" fg:x="5341" fg:w="23"/><text x="67.0459%" y="223.50"></text></g><g><title>rust-barebones`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.03%)</title><rect x="67.0835%" y="213" width="0.0250%" height="15" fill="rgb(223,4,10)" fg:x="5364" fg:w="2"/><text x="67.3335%" y="223.50"></text></g><g><title>rust-barebones`tokio::task::local::Shared::schedule (2 samples, 0.03%)</title><rect x="67.1086%" y="213" width="0.0250%" height="15" fill="rgb(234,103,6)" fg:x="5366" fg:w="2"/><text x="67.3586%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,078 samples, 63.51%)</title><rect x="3.7144%" y="229" width="63.5068%" height="15" fill="rgb(227,97,0)" fg:x="297" fg:w="5078"/><text x="3.9644%" y="239.50">rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>rust-barebones`tokio::util::memchr::memchr (7 samples, 0.09%)</title><rect x="67.1336%" y="213" width="0.0875%" height="15" fill="rgb(234,150,53)" fg:x="5368" fg:w="7"/><text x="67.3836%" y="223.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_idle (4 samples, 0.05%)</title><rect x="67.2211%" y="229" width="0.0500%" height="15" fill="rgb(228,201,54)" fg:x="5375" fg:w="4"/><text x="67.4711%" y="239.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_running (5 samples, 0.06%)</title><rect x="67.2711%" y="229" width="0.0625%" height="15" fill="rgb(222,22,37)" fg:x="5379" fg:w="5"/><text x="67.5211%" y="239.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="67.3337%" y="229" width="0.0125%" height="15" fill="rgb(237,53,32)" fg:x="5384" fg:w="1"/><text x="67.5837%" y="239.50"></text></g><g><title>rust-barebones`tokio::sync::batch_semaphore::Semaphore::acquire (7 samples, 0.09%)</title><rect x="67.3462%" y="229" width="0.0875%" height="15" fill="rgb(233,25,53)" fg:x="5385" fg:w="7"/><text x="67.5962%" y="239.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.03%)</title><rect x="67.4337%" y="229" width="0.0250%" height="15" fill="rgb(210,40,34)" fg:x="5392" fg:w="2"/><text x="67.6837%" y="239.50"></text></g><g><title>rust-barebones`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (20 samples, 0.25%)</title><rect x="67.4587%" y="229" width="0.2501%" height="15" fill="rgb(241,220,44)" fg:x="5394" fg:w="20"/><text x="67.7087%" y="239.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,379 samples, 67.27%)</title><rect x="0.7004%" y="245" width="67.2711%" height="15" fill="rgb(235,28,35)" fg:x="56" fg:w="5379"/><text x="0.9504%" y="255.50">rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>rust-barebones`tokio::sync::task::atomic_waker::AtomicWaker::wake (21 samples, 0.26%)</title><rect x="67.7089%" y="229" width="0.2626%" height="15" fill="rgb(210,56,17)" fg:x="5414" fg:w="21"/><text x="67.9589%" y="239.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner::transition_result_to_poll_future (3 samples, 0.04%)</title><rect x="67.9715%" y="245" width="0.0375%" height="15" fill="rgb(224,130,29)" fg:x="5435" fg:w="3"/><text x="68.2215%" y="255.50"></text></g><g><title>rust-barebones`tokio::runtime::task::state::State::transition_to_running (1 samples, 0.01%)</title><rect x="68.0090%" y="245" width="0.0125%" height="15" fill="rgb(235,212,8)" fg:x="5438" fg:w="1"/><text x="68.2590%" y="255.50"></text></g><g><title>rust-barebones`&lt;tokio::task::local::LocalSet as core::future::future::Future&gt;::poll (5,427 samples, 67.87%)</title><rect x="0.1876%" y="277" width="67.8714%" height="15" fill="rgb(223,33,50)" fg:x="15" fg:w="5427"/><text x="0.4376%" y="287.50">rust-barebones`&lt;tokio::task::local::LocalSet as core::future::future::Future&gt;::poll</text></g><g><title>rust-barebones`tokio::task::local::LocalSet::tick (5,398 samples, 67.51%)</title><rect x="0.5503%" y="261" width="67.5088%" height="15" fill="rgb(219,149,13)" fg:x="44" fg:w="5398"/><text x="0.8003%" y="271.50">rust-barebones`tokio::task::local::LocalSet::tick</text></g><g><title>rust-barebones`tokio::runtime::task::waker::raw_waker (3 samples, 0.04%)</title><rect x="68.0215%" y="245" width="0.0375%" height="15" fill="rgb(250,156,29)" fg:x="5439" fg:w="3"/><text x="68.2715%" y="255.50"></text></g><g><title>rust-barebones`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,432 samples, 67.93%)</title><rect x="0.1501%" y="293" width="67.9340%" height="15" fill="rgb(216,193,19)" fg:x="12" fg:w="5432"/><text x="0.4001%" y="303.50">rust-barebones`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rust-barebones`tokio::task::local::LocalSet::tick (2 samples, 0.03%)</title><rect x="68.0590%" y="277" width="0.0250%" height="15" fill="rgb(216,135,14)" fg:x="5442" fg:w="2"/><text x="68.3090%" y="287.50"></text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::Context::enter (5,434 samples, 67.96%)</title><rect x="0.1501%" y="309" width="67.9590%" height="15" fill="rgb(241,47,5)" fg:x="12" fg:w="5434"/><text x="0.4001%" y="319.50">rust-barebones`tokio::runtime::scheduler::current_thread::Context::enter</text></g><g><title>rust-barebones`&lt;tokio::task::local::LocalSet as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="68.0840%" y="293" width="0.0250%" height="15" fill="rgb(233,42,35)" fg:x="5444" fg:w="2"/><text x="68.3340%" y="303.50"></text></g><g><title>rust-barebones`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (1 samples, 0.01%)</title><rect x="68.1966%" y="293" width="0.0125%" height="15" fill="rgb(231,13,6)" fg:x="5453" fg:w="1"/><text x="68.4466%" y="303.50"></text></g><g><title> 32]&gt; (1 samples, 0.01%)</title><rect x="68.1966%" y="277" width="0.0125%" height="15" fill="rgb(207,181,40)" fg:x="5453" fg:w="1"/><text x="68.4466%" y="287.50"></text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="68.2091%" y="293" width="0.0250%" height="15" fill="rgb(254,173,49)" fg:x="5454" fg:w="2"/><text x="68.4591%" y="303.50"></text></g><g><title>rust-barebones`tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.04%)</title><rect x="68.2341%" y="293" width="0.0375%" height="15" fill="rgb(221,1,38)" fg:x="5456" fg:w="3"/><text x="68.4841%" y="303.50"></text></g><g><title>rust-barebones`tokio::runtime::driver::Driver::park (1 samples, 0.01%)</title><rect x="68.2716%" y="293" width="0.0125%" height="15" fill="rgb(206,124,46)" fg:x="5459" fg:w="1"/><text x="68.5216%" y="303.50"></text></g><g><title>rust-barebones`tokio::runtime::signal::Driver::process (5 samples, 0.06%)</title><rect x="68.2841%" y="293" width="0.0625%" height="15" fill="rgb(249,21,11)" fg:x="5460" fg:w="5"/><text x="68.5341%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.03%)</title><rect x="68.4342%" y="277" width="0.0250%" height="15" fill="rgb(222,201,40)" fg:x="5472" fg:w="2"/><text x="68.6842%" y="287.50"></text></g><g><title>rust-barebones`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="68.4592%" y="277" width="0.0125%" height="15" fill="rgb(235,61,29)" fg:x="5474" fg:w="1"/><text x="68.7092%" y="287.50"></text></g><g><title>rust-barebones`mio::poll::Poll::poll (2 samples, 0.03%)</title><rect x="68.4717%" y="277" width="0.0250%" height="15" fill="rgb(219,207,3)" fg:x="5475" fg:w="2"/><text x="68.7217%" y="287.50"></text></g><g><title>rust-barebones`std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.01%)</title><rect x="68.4967%" y="277" width="0.0125%" height="15" fill="rgb(222,56,46)" fg:x="5477" fg:w="1"/><text x="68.7467%" y="287.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (1 samples, 0.01%)</title><rect x="68.5093%" y="245" width="0.0125%" height="15" fill="rgb(239,76,54)" fg:x="5478" fg:w="1"/><text x="68.7593%" y="255.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (1 samples, 0.01%)</title><rect x="68.5218%" y="245" width="0.0125%" height="15" fill="rgb(231,124,27)" fg:x="5479" fg:w="1"/><text x="68.7718%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="68.5343%" y="245" width="0.0250%" height="15" fill="rgb(249,195,6)" fg:x="5480" fg:w="2"/><text x="68.7843%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16 samples, 0.20%)</title><rect x="68.5593%" y="245" width="0.2001%" height="15" fill="rgb(237,174,47)" fg:x="5482" fg:w="16"/><text x="68.8093%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (21 samples, 0.26%)</title><rect x="68.5093%" y="261" width="0.2626%" height="15" fill="rgb(206,201,31)" fg:x="5478" fg:w="21"/><text x="68.7593%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.01%)</title><rect x="68.7594%" y="245" width="0.0125%" height="15" fill="rgb(231,57,52)" fg:x="5498" fg:w="1"/><text x="69.0094%" y="255.50"></text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (22 samples, 0.28%)</title><rect x="68.5093%" y="277" width="0.2751%" height="15" fill="rgb(248,177,22)" fg:x="5478" fg:w="22"/><text x="68.7593%" y="287.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.01%)</title><rect x="68.7719%" y="261" width="0.0125%" height="15" fill="rgb(215,211,37)" fg:x="5499" fg:w="1"/><text x="69.0219%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`kevent (522 samples, 6.53%)</title><rect x="68.8719%" y="261" width="6.5283%" height="15" fill="rgb(241,128,51)" fg:x="5507" fg:w="522"/><text x="69.1219%" y="271.50">libsystem..</text></g><g><title>rust-barebones`DYLD-STUB$$kevent (1 samples, 0.01%)</title><rect x="75.4002%" y="261" width="0.0125%" height="15" fill="rgb(227,165,31)" fg:x="6029" fg:w="1"/><text x="75.6502%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::io::driver::Driver::turn (532 samples, 6.65%)</title><rect x="68.7844%" y="277" width="6.6533%" height="15" fill="rgb(228,167,24)" fg:x="5500" fg:w="532"/><text x="69.0344%" y="287.50">rust-bare..</text></g><g><title>rust-barebones`mio::poll::Poll::poll (2 samples, 0.03%)</title><rect x="75.4127%" y="261" width="0.0250%" height="15" fill="rgb(228,143,12)" fg:x="6030" fg:w="2"/><text x="75.6627%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::time::Driver::park_internal (571 samples, 7.14%)</title><rect x="68.3467%" y="293" width="7.1411%" height="15" fill="rgb(249,149,8)" fg:x="5465" fg:w="571"/><text x="68.5967%" y="303.50">rust-bareb..</text></g><g><title>rust-barebones`tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.05%)</title><rect x="75.4377%" y="277" width="0.0500%" height="15" fill="rgb(243,35,44)" fg:x="6032" fg:w="4"/><text x="75.6877%" y="287.50"></text></g><g><title>rust-barebones`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (3 samples, 0.04%)</title><rect x="75.5253%" y="277" width="0.0375%" height="15" fill="rgb(246,89,9)" fg:x="6039" fg:w="3"/><text x="75.7753%" y="287.50"></text></g><g><title> 32]&gt; (3 samples, 0.04%)</title><rect x="75.5253%" y="261" width="0.0375%" height="15" fill="rgb(233,213,13)" fg:x="6039" fg:w="3"/><text x="75.7753%" y="271.50"></text></g><g><title>rust-barebones`tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.01%)</title><rect x="75.5628%" y="277" width="0.0125%" height="15" fill="rgb(233,141,41)" fg:x="6042" fg:w="1"/><text x="75.8128%" y="287.50"></text></g><g><title>rust-barebones`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (6,043 samples, 75.58%)</title><rect x="0.0125%" y="325" width="75.5753%" height="15" fill="rgb(239,167,4)" fg:x="1" fg:w="6043"/><text x="0.2625%" y="335.50">rust-barebones`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::Context::park (598 samples, 7.48%)</title><rect x="68.1091%" y="309" width="7.4787%" height="15" fill="rgb(209,217,16)" fg:x="5446" fg:w="598"/><text x="68.3591%" y="319.50">rust-bareb..</text></g><g><title>rust-barebones`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (8 samples, 0.10%)</title><rect x="75.4877%" y="293" width="0.1001%" height="15" fill="rgb(219,88,35)" fg:x="6036" fg:w="8"/><text x="75.7377%" y="303.50"></text></g><g><title>rust-barebones`tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.01%)</title><rect x="75.5753%" y="277" width="0.0125%" height="15" fill="rgb(220,193,23)" fg:x="6043" fg:w="1"/><text x="75.8253%" y="287.50"></text></g><g><title>rust-barebones`tokio::runtime::metrics::mock::MetricsBatch::start_poll (1 samples, 0.01%)</title><rect x="75.5878%" y="325" width="0.0125%" height="15" fill="rgb(230,90,52)" fg:x="6044" fg:w="1"/><text x="75.8378%" y="335.50"></text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 0.01%)</title><rect x="75.6003%" y="325" width="0.0125%" height="15" fill="rgb(252,106,19)" fg:x="6045" fg:w="1"/><text x="75.8503%" y="335.50"></text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::Context::park (1 samples, 0.01%)</title><rect x="75.6128%" y="325" width="0.0125%" height="15" fill="rgb(206,74,20)" fg:x="6046" fg:w="1"/><text x="75.8628%" y="335.50"></text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::Handle::reset_woken (1 samples, 0.01%)</title><rect x="75.6253%" y="325" width="0.0125%" height="15" fill="rgb(230,138,44)" fg:x="6047" fg:w="1"/><text x="75.8753%" y="335.50"></text></g><g><title>dyld`start (6,049 samples, 75.65%)</title><rect x="0.0000%" y="501" width="75.6503%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="511.50">dyld`start</text></g><g><title>rust-barebones`main (6,049 samples, 75.65%)</title><rect x="0.0000%" y="485" width="75.6503%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="495.50">rust-barebones`main</text></g><g><title>rust-barebones`std::rt::lang_start_internal (6,049 samples, 75.65%)</title><rect x="0.0000%" y="469" width="75.6503%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="479.50">rust-barebones`std::rt::lang_start_internal</text></g><g><title>rust-barebones`std::rt::lang_start::_{{closure}} (6,049 samples, 75.65%)</title><rect x="0.0000%" y="453" width="75.6503%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="463.50">rust-barebones`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-barebones`std::sys_common::backtrace::__rust_begin_short_backtrace (6,049 samples, 75.65%)</title><rect x="0.0000%" y="437" width="75.6503%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="447.50">rust-barebones`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-barebones`rust_barebones::main (6,049 samples, 75.65%)</title><rect x="0.0000%" y="421" width="75.6503%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="6049"/><text x="0.2500%" y="431.50">rust-barebones`rust_barebones::main</text></g><g><title>rust-barebones`tokio::runtime::runtime::Runtime::block_on (6,048 samples, 75.64%)</title><rect x="0.0125%" y="405" width="75.6378%" height="15" fill="rgb(253,106,12)" fg:x="1" fg:w="6048"/><text x="0.2625%" y="415.50">rust-barebones`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::CurrentThread::block_on (6,048 samples, 75.64%)</title><rect x="0.0125%" y="389" width="75.6378%" height="15" fill="rgb(213,46,41)" fg:x="1" fg:w="6048"/><text x="0.2625%" y="399.50">rust-barebones`tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>rust-barebones`tokio::runtime::context::runtime::enter_runtime (6,048 samples, 75.64%)</title><rect x="0.0125%" y="373" width="75.6378%" height="15" fill="rgb(215,133,35)" fg:x="1" fg:w="6048"/><text x="0.2625%" y="383.50">rust-barebones`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>rust-barebones`tokio::runtime::scheduler::current_thread::CoreGuard::block_on (6,048 samples, 75.64%)</title><rect x="0.0125%" y="357" width="75.6378%" height="15" fill="rgb(213,28,5)" fg:x="1" fg:w="6048"/><text x="0.2625%" y="367.50">rust-barebones`tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>rust-barebones`tokio::runtime::context::set_scheduler (6,048 samples, 75.64%)</title><rect x="0.0125%" y="341" width="75.6378%" height="15" fill="rgb(215,77,49)" fg:x="1" fg:w="6048"/><text x="0.2625%" y="351.50">rust-barebones`tokio::runtime::context::set_scheduler</text></g><g><title>rust-barebones`tokio::runtime::scheduler::defer::Defer::is_empty (1 samples, 0.01%)</title><rect x="75.6378%" y="325" width="0.0125%" height="15" fill="rgb(248,100,22)" fg:x="6048" fg:w="1"/><text x="75.8878%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.04%)</title><rect x="75.6503%" y="501" width="0.0375%" height="15" fill="rgb(208,67,9)" fg:x="6049" fg:w="3"/><text x="75.9003%" y="511.50"></text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.01%)</title><rect x="75.6878%" y="421" width="0.0125%" height="15" fill="rgb(219,133,21)" fg:x="6052" fg:w="1"/><text x="75.9378%" y="431.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (5 samples, 0.06%)</title><rect x="75.7754%" y="405" width="0.0625%" height="15" fill="rgb(246,46,29)" fg:x="6059" fg:w="5"/><text x="76.0254%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="75.8379%" y="405" width="0.0125%" height="15" fill="rgb(246,185,52)" fg:x="6064" fg:w="1"/><text x="76.0879%" y="415.50"></text></g><g><title>rust-barebones`DYLD-STUB$$pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="75.8504%" y="405" width="0.0250%" height="15" fill="rgb(252,136,11)" fg:x="6065" fg:w="2"/><text x="76.1004%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.01%)</title><rect x="75.9630%" y="389" width="0.0125%" height="15" fill="rgb(219,138,53)" fg:x="6074" fg:w="1"/><text x="76.2130%" y="399.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (5 samples, 0.06%)</title><rect x="75.9755%" y="389" width="0.0625%" height="15" fill="rgb(211,51,23)" fg:x="6075" fg:w="5"/><text x="76.2255%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.06%)</title><rect x="75.9755%" y="373" width="0.0625%" height="15" fill="rgb(247,221,28)" fg:x="6075" fg:w="5"/><text x="76.2255%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__gettimeofday (92 samples, 1.15%)</title><rect x="76.0380%" y="389" width="1.1506%" height="15" fill="rgb(251,222,45)" fg:x="6080" fg:w="92"/><text x="76.2880%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (645 samples, 8.07%)</title><rect x="77.1886%" y="389" width="8.0665%" height="15" fill="rgb(217,162,53)" fg:x="6172" fg:w="645"/><text x="77.4386%" y="399.50">libsystem_k..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="85.2801%" y="373" width="0.0250%" height="15" fill="rgb(229,93,14)" fg:x="6819" fg:w="2"/><text x="85.5301%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.03%)</title><rect x="85.2801%" y="357" width="0.0250%" height="15" fill="rgb(209,67,49)" fg:x="6819" fg:w="2"/><text x="85.5301%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="85.3052%" y="373" width="0.0125%" height="15" fill="rgb(213,87,29)" fg:x="6821" fg:w="1"/><text x="85.5552%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (6 samples, 0.08%)</title><rect x="85.2551%" y="389" width="0.0750%" height="15" fill="rgb(205,151,52)" fg:x="6817" fg:w="6"/><text x="85.5051%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.01%)</title><rect x="85.3177%" y="373" width="0.0125%" height="15" fill="rgb(253,215,39)" fg:x="6822" fg:w="1"/><text x="85.5677%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.03%)</title><rect x="85.3302%" y="389" width="0.0250%" height="15" fill="rgb(221,220,41)" fg:x="6823" fg:w="2"/><text x="85.5802%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="85.3552%" y="389" width="0.0125%" height="15" fill="rgb(218,133,21)" fg:x="6825" fg:w="1"/><text x="85.6052%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (3 samples, 0.04%)</title><rect x="85.3677%" y="389" width="0.0375%" height="15" fill="rgb(221,193,43)" fg:x="6826" fg:w="3"/><text x="85.6177%" y="399.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (1 samples, 0.01%)</title><rect x="85.4052%" y="357" width="0.0125%" height="15" fill="rgb(240,128,52)" fg:x="6829" fg:w="1"/><text x="85.6552%" y="367.50"></text></g><g><title>rust-barebones`parking_lot::condvar::Condvar::wait_until_internal (786 samples, 9.83%)</title><rect x="75.8754%" y="405" width="9.8299%" height="15" fill="rgb(253,114,12)" fg:x="6067" fg:w="786"/><text x="76.1254%" y="415.50">rust-barebones..</text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (24 samples, 0.30%)</title><rect x="85.4052%" y="389" width="0.3002%" height="15" fill="rgb(215,223,47)" fg:x="6829" fg:w="24"/><text x="85.6552%" y="399.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (24 samples, 0.30%)</title><rect x="85.4052%" y="373" width="0.3002%" height="15" fill="rgb(248,225,23)" fg:x="6829" fg:w="24"/><text x="85.6552%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.29%)</title><rect x="85.4177%" y="357" width="0.2876%" height="15" fill="rgb(250,108,0)" fg:x="6830" fg:w="23"/><text x="85.6677%" y="367.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (10 samples, 0.13%)</title><rect x="85.7054%" y="389" width="0.1251%" height="15" fill="rgb(228,208,7)" fg:x="6853" fg:w="10"/><text x="85.9554%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.11%)</title><rect x="85.7179%" y="373" width="0.1126%" height="15" fill="rgb(244,45,10)" fg:x="6854" fg:w="9"/><text x="85.9679%" y="383.50"></text></g><g><title>rust-barebones`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (15 samples, 0.19%)</title><rect x="85.7054%" y="405" width="0.1876%" height="15" fill="rgb(207,125,25)" fg:x="6853" fg:w="15"/><text x="85.9554%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (5 samples, 0.06%)</title><rect x="85.8304%" y="389" width="0.0625%" height="15" fill="rgb(210,195,18)" fg:x="6863" fg:w="5"/><text x="86.0804%" y="399.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="85.8929%" y="405" width="0.0125%" height="15" fill="rgb(249,80,12)" fg:x="6868" fg:w="1"/><text x="86.1429%" y="415.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.01%)</title><rect x="85.9055%" y="405" width="0.0125%" height="15" fill="rgb(221,65,9)" fg:x="6869" fg:w="1"/><text x="86.1555%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.11%)</title><rect x="85.9805%" y="389" width="0.1126%" height="15" fill="rgb(235,49,36)" fg:x="6875" fg:w="9"/><text x="86.2305%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="86.1181%" y="373" width="0.0125%" height="15" fill="rgb(225,32,20)" fg:x="6886" fg:w="1"/><text x="86.3681%" y="383.50"></text></g><g><title>rust-barebones`&lt;&amp;std::fs::File as std::io::Read&gt;::read (3 samples, 0.04%)</title><rect x="86.1431%" y="357" width="0.0375%" height="15" fill="rgb(215,141,46)" fg:x="6888" fg:w="3"/><text x="86.3931%" y="367.50"></text></g><g><title>rust-barebones`std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="86.1806%" y="357" width="0.0125%" height="15" fill="rgb(250,160,47)" fg:x="6891" fg:w="1"/><text x="86.4306%" y="367.50"></text></g><g><title>rust-barebones`std::sys::unix::fs::File::open_c (1 samples, 0.01%)</title><rect x="86.1806%" y="341" width="0.0125%" height="15" fill="rgb(216,222,40)" fg:x="6891" fg:w="1"/><text x="86.4306%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.01%)</title><rect x="86.1806%" y="325" width="0.0125%" height="15" fill="rgb(234,217,39)" fg:x="6891" fg:w="1"/><text x="86.4306%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (762 samples, 9.53%)</title><rect x="86.2056%" y="341" width="9.5298%" height="15" fill="rgb(207,178,40)" fg:x="6893" fg:w="762"/><text x="86.4556%" y="351.50">libsystem_kern..</text></g><g><title>rust-barebones`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (769 samples, 9.62%)</title><rect x="86.1306%" y="373" width="9.6173%" height="15" fill="rgb(221,136,13)" fg:x="6887" fg:w="769"/><text x="86.3806%" y="383.50">rust-barebones..</text></g><g><title>rust-barebones`tokio::io::blocking::Buf::read_from (764 samples, 9.55%)</title><rect x="86.1931%" y="357" width="9.5548%" height="15" fill="rgb(249,199,10)" fg:x="6892" fg:w="764"/><text x="86.4431%" y="367.50">rust-barebones..</text></g><g><title>rust-barebones`&lt;&amp;std::fs::File as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="95.7354%" y="341" width="0.0125%" height="15" fill="rgb(249,222,13)" fg:x="7655" fg:w="1"/><text x="95.9854%" y="351.50"></text></g><g><title>rust-barebones`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (773 samples, 9.67%)</title><rect x="86.0930%" y="389" width="9.6673%" height="15" fill="rgb(244,185,38)" fg:x="6884" fg:w="773"/><text x="86.3430%" y="399.50">rust-barebones..</text></g><g><title>rust-barebones`tokio::io::blocking::Buf::read_from (1 samples, 0.01%)</title><rect x="95.7479%" y="373" width="0.0125%" height="15" fill="rgb(236,202,9)" fg:x="7656" fg:w="1"/><text x="95.9979%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.03%)</title><rect x="95.7979%" y="373" width="0.0250%" height="15" fill="rgb(250,229,37)" fg:x="7660" fg:w="2"/><text x="96.0479%" y="383.50"></text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_ref (1 samples, 0.01%)</title><rect x="95.8229%" y="373" width="0.0125%" height="15" fill="rgb(206,174,23)" fg:x="7662" fg:w="1"/><text x="96.0729%" y="383.50"></text></g><g><title>rust-barebones`mio::waker::Waker::wake (1 samples, 0.01%)</title><rect x="95.8854%" y="341" width="0.0125%" height="15" fill="rgb(211,33,43)" fg:x="7667" fg:w="1"/><text x="96.1354%" y="351.50"></text></g><g><title>rust-barebones`tokio::task::local::Shared::schedule (325 samples, 4.06%)</title><rect x="95.8354%" y="373" width="4.0645%" height="15" fill="rgb(245,58,50)" fg:x="7663" fg:w="325"/><text x="96.0854%" y="383.50">rust..</text></g><g><title>rust-barebones`&lt;tokio::runtime::scheduler::current_thread::Handle as tokio::util::wake::Wake&gt;::wake (321 samples, 4.01%)</title><rect x="95.8854%" y="357" width="4.0145%" height="15" fill="rgb(244,68,36)" fg:x="7667" fg:w="321"/><text x="96.1354%" y="367.50">rust..</text></g><g><title>rust-barebones`tokio::runtime::driver::Handle::unpark (320 samples, 4.00%)</title><rect x="95.8979%" y="341" width="4.0020%" height="15" fill="rgb(232,229,15)" fg:x="7668" fg:w="320"/><text x="96.1479%" y="351.50">rust..</text></g><g><title>libsystem_kernel.dylib`kevent (319 samples, 3.99%)</title><rect x="95.9105%" y="325" width="3.9895%" height="15" fill="rgb(254,30,23)" fg:x="7669" fg:w="319"/><text x="96.1605%" y="335.50">libs..</text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (332 samples, 4.15%)</title><rect x="95.7604%" y="389" width="4.1521%" height="15" fill="rgb(235,160,14)" fg:x="7657" fg:w="332"/><text x="96.0104%" y="399.50">rust-..</text></g><g><title>rust-barebones`tokio::util::wake::wake_arc_raw (1 samples, 0.01%)</title><rect x="99.8999%" y="373" width="0.0125%" height="15" fill="rgb(212,155,44)" fg:x="7988" fg:w="1"/><text x="100.1499%" y="383.50"></text></g><g><title>rust-barebones`tokio::runtime::blocking::pool::Inner::run (1,937 samples, 24.22%)</title><rect x="75.7004%" y="421" width="24.2246%" height="15" fill="rgb(226,2,50)" fg:x="6053" fg:w="1937"/><text x="75.9504%" y="431.50">rust-barebones`tokio::runtime::blocking..</text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,120 samples, 14.01%)</title><rect x="85.9180%" y="405" width="14.0070%" height="15" fill="rgb(234,177,6)" fg:x="6870" fg:w="1120"/><text x="86.1680%" y="415.50">rust-barebones`tokio:..</text></g><g><title>rust-barebones`tokio::runtime::task::waker::wake_by_ref (1 samples, 0.01%)</title><rect x="99.9125%" y="389" width="0.0125%" height="15" fill="rgb(217,24,9)" fg:x="7989" fg:w="1"/><text x="100.1625%" y="399.50"></text></g><g><title>rust-barebones`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="99.9250%" y="421" width="0.0125%" height="15" fill="rgb(220,13,46)" fg:x="7990" fg:w="1"/><text x="100.1750%" y="431.50"></text></g><g><title>all (7,996 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="7996"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,944 samples, 24.31%)</title><rect x="75.6878%" y="501" width="24.3122%" height="15" fill="rgb(222,198,25)" fg:x="6052" fg:w="1944"/><text x="75.9378%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,944 samples, 24.31%)</title><rect x="75.6878%" y="485" width="24.3122%" height="15" fill="rgb(211,99,13)" fg:x="6052" fg:w="1944"/><text x="75.9378%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust-barebones`std::sys::unix::thread::Thread::new::thread_start (1,944 samples, 24.31%)</title><rect x="75.6878%" y="469" width="24.3122%" height="15" fill="rgb(232,111,31)" fg:x="6052" fg:w="1944"/><text x="75.9378%" y="479.50">rust-barebones`std::sys::unix::thread::..</text></g><g><title>rust-barebones`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,944 samples, 24.31%)</title><rect x="75.6878%" y="453" width="24.3122%" height="15" fill="rgb(245,82,37)" fg:x="6052" fg:w="1944"/><text x="75.9378%" y="463.50">rust-barebones`core::ops::function::FnO..</text></g><g><title>rust-barebones`std::sys_common::backtrace::__rust_begin_short_backtrace (1,944 samples, 24.31%)</title><rect x="75.6878%" y="437" width="24.3122%" height="15" fill="rgb(227,149,46)" fg:x="6052" fg:w="1944"/><text x="75.9378%" y="447.50">rust-barebones`std::sys_common::backtra..</text></g><g><title>rust-barebones`tokio::runtime::task::raw::poll (5 samples, 0.06%)</title><rect x="99.9375%" y="421" width="0.0625%" height="15" fill="rgb(218,36,50)" fg:x="7991" fg:w="5"/><text x="100.1875%" y="431.50"></text></g></svg></svg>